<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [SP_Servo\SP_Servo.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image SP_Servo\SP_Servo.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Fri Jun 16 10:40:17 2023
<BR><P>
<H3>Maximum Stack Usage =        844 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
HandleWriteMultipleCoilCommand &rArr; SyntheticSlaveAccessRespond &rArr; GenerateMasterAccessRespond &rArr; ConvertBoolArrayToMBByteArray
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[8f]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1f]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f]">NMI_Handler</a><BR>
 <LI><a href="#[21]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[21]">MemManage_Handler</a><BR>
 <LI><a href="#[22]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[22]">BusFault_Handler</a><BR>
 <LI><a href="#[23]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[23]">UsageFault_Handler</a><BR>
 <LI><a href="#[24]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[24]">SVC_Handler</a><BR>
 <LI><a href="#[25]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[25]">DebugMon_Handler</a><BR>
 <LI><a href="#[26]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[26]">PendSV_Handler</a><BR>
 <LI><a href="#[61]">COMP1_2_3_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[61]">COMP1_2_3_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[39]">ADC1_2_IRQHandler</a> from stm32g4xx_mc_it.o(i.ADC1_2_IRQHandler) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[11]">ASPEP_RXframeProcess</a> from aspep.o(i.ASPEP_RXframeProcess) referenced 2 times from mcp_config.o(.data)
 <LI><a href="#[f]">ASPEP_getBuffer</a> from aspep.o(i.ASPEP_getBuffer) referenced 2 times from mcp_config.o(.data)
 <LI><a href="#[10]">ASPEP_sendPacket</a> from aspep.o(i.ASPEP_sendPacket) referenced 2 times from mcp_config.o(.data)
 <LI><a href="#[22]">BusFault_Handler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[61]">COMP1_2_3_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[62]">COMP4_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[6c]">CORDIC_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[63]">CRS_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[33]">DMA1_Channel1_IRQHandler</a> from stm32g4xx_mc_it.o(i.DMA1_Channel1_IRQHandler) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[34]">DMA1_Channel2_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[35]">DMA1_Channel3_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[36]">DMA1_Channel4_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[37]">DMA1_Channel5_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[38]">DMA1_Channel6_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[5b]">DMA2_Channel1_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[5c]">DMA2_Channel2_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[5d]">DMA2_Channel3_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[5e]">DMA2_Channel4_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[5f]">DMA2_Channel5_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[6b]">DMA2_Channel6_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[6a]">DMAMUX_OVR_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[25]">DebugMon_Handler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[2e]">EXTI0_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[4f]">EXTI15_10_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[2f]">EXTI1_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[30]">EXTI2_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[31]">EXTI3_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[32]">EXTI4_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[3e]">EXTI9_5_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[3c]">FDCAN1_IT0_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[3d]">FDCAN1_IT1_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[2c]">FLASH_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[6d]">FMAC_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[65]">FPU_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[16]">HandleReadCoilStatusCommand</a> from mbrtuslave.o(i.HandleReadCoilStatusCommand) referenced 2 times from mbrtuslave.o(.data)
 <LI><a href="#[18]">HandleReadHoldingRegisterCommand</a> from mbrtuslave.o(i.HandleReadHoldingRegisterCommand) referenced 2 times from mbrtuslave.o(.data)
 <LI><a href="#[19]">HandleReadInputRegisterCommand</a> from mbrtuslave.o(i.HandleReadInputRegisterCommand) referenced 2 times from mbrtuslave.o(.data)
 <LI><a href="#[17]">HandleReadInputStatusCommand</a> from mbrtuslave.o(i.HandleReadInputStatusCommand) referenced 2 times from mbrtuslave.o(.data)
 <LI><a href="#[1c]">HandleWriteMultipleCoilCommand</a> from mbrtuslave.o(i.HandleWriteMultipleCoilCommand) referenced 2 times from mbrtuslave.o(.data)
 <LI><a href="#[1d]">HandleWriteMultipleRegisterCommand</a> from mbrtuslave.o(i.HandleWriteMultipleRegisterCommand) referenced 2 times from mbrtuslave.o(.data)
 <LI><a href="#[1a]">HandleWriteSingleCoilCommand</a> from mbrtuslave.o(i.HandleWriteSingleCoilCommand) referenced 2 times from mbrtuslave.o(.data)
 <LI><a href="#[1b]">HandleWriteSingleRegisterCommand</a> from mbrtuslave.o(i.HandleWriteSingleRegisterCommand) referenced 2 times from mbrtuslave.o(.data)
 <LI><a href="#[20]">HardFault_Handler</a> from stm32g4xx_mc_it.o(i.HardFault_Handler) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[47]">I2C1_ER_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[46]">I2C1_EV_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[49]">I2C2_ER_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[48]">I2C2_EV_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[69]">I2C3_ER_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[68]">I2C3_EV_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[56]">LPTIM1_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[67]">LPUART1_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[21]">MemManage_Handler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[1f]">NMI_Handler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[29]">PVD_PVM_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[26]">PendSV_Handler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[6]">R3_2_CurrentReadingPolarization</a> from r3_2_g4xx_pwm_curr_fdbk.o(i.R3_2_CurrentReadingPolarization) referenced 2 times from mc_config.o(.data)
 <LI><a href="#[e]">R3_2_GetOffsetCalib</a> from r3_2_g4xx_pwm_curr_fdbk.o(i.R3_2_GetOffsetCalib) referenced 2 times from mc_config.o(.data)
 <LI><a href="#[3]">R3_2_GetPhaseCurrents</a> from r3_2_g4xx_pwm_curr_fdbk.o(i.R3_2_GetPhaseCurrents) referenced 2 times from mc_config.o(.data)
 <LI><a href="#[3]">R3_2_GetPhaseCurrents</a> from r3_2_g4xx_pwm_curr_fdbk.o(i.R3_2_GetPhaseCurrents) referenced from r3_2_g4xx_pwm_curr_fdbk.o(i.R3_2_RLDetectionModeDisable)
 <LI><a href="#[71]">R3_2_HFCurrentsPolarizationAB</a> from r3_2_g4xx_pwm_curr_fdbk.o(i.R3_2_HFCurrentsPolarizationAB) referenced from r3_2_g4xx_pwm_curr_fdbk.o(i.R3_2_CurrentReadingPolarization)
 <LI><a href="#[73]">R3_2_HFCurrentsPolarizationC</a> from r3_2_g4xx_pwm_curr_fdbk.o(i.R3_2_HFCurrentsPolarizationC) referenced from r3_2_g4xx_pwm_curr_fdbk.o(i.R3_2_CurrentReadingPolarization)
 <LI><a href="#[9]">R3_2_IsOverCurrentOccurred</a> from r3_2_g4xx_pwm_curr_fdbk.o(i.R3_2_IsOverCurrentOccurred) referenced 2 times from mc_config.o(.data)
 <LI><a href="#[b]">R3_2_RLDetectionModeDisable</a> from r3_2_g4xx_pwm_curr_fdbk.o(i.R3_2_RLDetectionModeDisable) referenced 2 times from mc_config.o(.data)
 <LI><a href="#[a]">R3_2_RLDetectionModeEnable</a> from r3_2_g4xx_pwm_curr_fdbk.o(i.R3_2_RLDetectionModeEnable) referenced 2 times from mc_config.o(.data)
 <LI><a href="#[c]">R3_2_RLDetectionModeSetDuty</a> from r3_2_g4xx_pwm_curr_fdbk.o(i.R3_2_RLDetectionModeSetDuty) referenced 2 times from mc_config.o(.data)
 <LI><a href="#[74]">R3_2_RLGetPhaseCurrents</a> from r3_2_g4xx_pwm_curr_fdbk.o(i.R3_2_RLGetPhaseCurrents) referenced from r3_2_g4xx_pwm_curr_fdbk.o(i.R3_2_RLDetectionModeEnable)
 <LI><a href="#[76]">R3_2_RLSwitchOnPWM</a> from r3_2_g4xx_pwm_curr_fdbk.o(i.R3_2_RLSwitchOnPWM) referenced from r3_2_g4xx_pwm_curr_fdbk.o(i.R3_2_RLDetectionModeEnable)
 <LI><a href="#[75]">R3_2_RLTurnOnLowSides</a> from r3_2_g4xx_pwm_curr_fdbk.o(i.R3_2_RLTurnOnLowSides) referenced from r3_2_g4xx_pwm_curr_fdbk.o(i.R3_2_RLDetectionModeEnable)
 <LI><a href="#[72]">R3_2_SetADCSampPointPolarization</a> from r3_2_g4xx_pwm_curr_fdbk.o(i.R3_2_SetADCSampPointPolarization) referenced from r3_2_g4xx_pwm_curr_fdbk.o(i.R3_2_CurrentReadingPolarization)
 <LI><a href="#[8]">R3_2_SetADCSampPointSectX</a> from r3_2_g4xx_pwm_curr_fdbk.o(i.R3_2_SetADCSampPointSectX) referenced 2 times from mc_config.o(.data)
 <LI><a href="#[d]">R3_2_SetOffsetCalib</a> from r3_2_g4xx_pwm_curr_fdbk.o(i.R3_2_SetOffsetCalib) referenced 2 times from mc_config.o(.data)
 <LI><a href="#[4]">R3_2_SwitchOffPWM</a> from r3_2_g4xx_pwm_curr_fdbk.o(i.R3_2_SwitchOffPWM) referenced 2 times from mc_config.o(.data)
 <LI><a href="#[4]">R3_2_SwitchOffPWM</a> from r3_2_g4xx_pwm_curr_fdbk.o(i.R3_2_SwitchOffPWM) referenced from r3_2_g4xx_pwm_curr_fdbk.o(i.R3_2_RLDetectionModeDisable)
 <LI><a href="#[4]">R3_2_SwitchOffPWM</a> from r3_2_g4xx_pwm_curr_fdbk.o(i.R3_2_SwitchOffPWM) referenced from r3_2_g4xx_pwm_curr_fdbk.o(i.R3_2_RLDetectionModeEnable)
 <LI><a href="#[5]">R3_2_SwitchOnPWM</a> from r3_2_g4xx_pwm_curr_fdbk.o(i.R3_2_SwitchOnPWM) referenced 2 times from mc_config.o(.data)
 <LI><a href="#[5]">R3_2_SwitchOnPWM</a> from r3_2_g4xx_pwm_curr_fdbk.o(i.R3_2_SwitchOnPWM) referenced from r3_2_g4xx_pwm_curr_fdbk.o(i.R3_2_RLDetectionModeDisable)
 <LI><a href="#[7]">R3_2_TurnOnLowSides</a> from r3_2_g4xx_pwm_curr_fdbk.o(i.R3_2_TurnOnLowSides) referenced 2 times from mc_config.o(.data)
 <LI><a href="#[7]">R3_2_TurnOnLowSides</a> from r3_2_g4xx_pwm_curr_fdbk.o(i.R3_2_TurnOnLowSides) referenced from r3_2_g4xx_pwm_curr_fdbk.o(i.R3_2_RLDetectionModeDisable)
 <LI><a href="#[2d]">RCC_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[66]">RNG_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[50]">RTC_Alarm_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[2a]">RTC_TAMP_LSECSS_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[2b]">RTC_WKUP_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[1e]">Reset_Handler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[64]">SAI1_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[4a]">SPI1_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[4b]">SPI2_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[57]">SPI3_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[24]">SVC_Handler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[27]">SysTick_Handler</a> from stm32g4xx_mc_it.o(i.SysTick_Handler) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[6e]">SystemInit</a> from system_stm32g4xx.o(i.SystemInit) referenced from startup_stm32g431xx.o(.text)
 <LI><a href="#[3f]">TIM1_BRK_TIM15_IRQHandler</a> from stm32g4xx_mc_it.o(i.TIM1_BRK_TIM15_IRQHandler) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[42]">TIM1_CC_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[41]">TIM1_TRG_COM_TIM17_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[40]">TIM1_UP_TIM16_IRQHandler</a> from stm32g4xx_mc_it.o(i.TIM1_UP_TIM16_IRQHandler) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[43]">TIM2_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[44]">TIM3_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[45]">TIM4_IRQHandler</a> from stm32g4xx_mc_it.o(i.TIM4_IRQHandler) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[59]">TIM6_DAC_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[5a]">TIM7_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[52]">TIM8_BRK_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[55]">TIM8_CC_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[54]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[53]">TIM8_UP_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[58]">UART4_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[70]">UART_DMAAbortOnError</a> from stm32g4xx_hal_uart.o(i.UART_DMAAbortOnError) referenced from stm32g4xx_hal_uart.o(i.HAL_UART_IRQHandler)
 <LI><a href="#[77]">UART_RxISR_16BIT</a> from stm32g4xx_hal_uart.o(i.UART_RxISR_16BIT) referenced from stm32g4xx_hal_uart.o(i.UART_RxISR_16BIT_FIFOEN)
 <LI><a href="#[77]">UART_RxISR_16BIT</a> from stm32g4xx_hal_uart.o(i.UART_RxISR_16BIT) referenced from stm32g4xx_hal_uart.o(i.UART_Start_Receive_IT)
 <LI><a href="#[7a]">UART_RxISR_16BIT_FIFOEN</a> from stm32g4xx_hal_uart.o(i.UART_RxISR_16BIT_FIFOEN) referenced from stm32g4xx_hal_uart.o(i.UART_Start_Receive_IT)
 <LI><a href="#[78]">UART_RxISR_8BIT</a> from stm32g4xx_hal_uart.o(i.UART_RxISR_8BIT) referenced from stm32g4xx_hal_uart.o(i.UART_RxISR_8BIT_FIFOEN)
 <LI><a href="#[78]">UART_RxISR_8BIT</a> from stm32g4xx_hal_uart.o(i.UART_RxISR_8BIT) referenced from stm32g4xx_hal_uart.o(i.UART_Start_Receive_IT)
 <LI><a href="#[79]">UART_RxISR_8BIT_FIFOEN</a> from stm32g4xx_hal_uart.o(i.UART_RxISR_8BIT_FIFOEN) referenced from stm32g4xx_hal_uart.o(i.UART_Start_Receive_IT)
 <LI><a href="#[13]">UASPEP_IDLE_ENABLE</a> from usart_aspep_driver.o(i.UASPEP_IDLE_ENABLE) referenced 2 times from mcp_config.o(.data)
 <LI><a href="#[12]">UASPEP_INIT</a> from usart_aspep_driver.o(i.UASPEP_INIT) referenced 2 times from mcp_config.o(.data)
 <LI><a href="#[14]">UASPEP_RECEIVE_BUFFER</a> from usart_aspep_driver.o(i.UASPEP_RECEIVE_BUFFER) referenced 2 times from mcp_config.o(.data)
 <LI><a href="#[15]">UASPEP_SEND_PACKET</a> from usart_aspep_driver.o(i.UASPEP_SEND_PACKET) referenced 2 times from mcp_config.o(.data)
 <LI><a href="#[60]">UCPD1_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[4c]">USART1_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[4d]">USART2_IRQHandler</a> from stm32g4xx_mc_it.o(i.USART2_IRQHandler) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[4e]">USART3_IRQHandler</a> from stm32g4xx_it.o(i.USART3_IRQHandler) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[51]">USBWakeUp_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[3a]">USB_HP_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[3b]">USB_LP_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[23]">UsageFault_Handler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[28]">WWDG_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[7b]">__main</a> from __main.o(!!!main) referenced from startup_stm32g431xx.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[7b]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[7c]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[7e]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[1c2]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1c3]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1c4]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[1c5]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[1c6]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[84]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[7f]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[1c7]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[1c8]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[1c9]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[1ca]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[1cb]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[1cc]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[1cd]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[1ce]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[1cf]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[1d0]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[1d1]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[1d2]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[1d3]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[1d4]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[1d5]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[1d6]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[1d7]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[1d8]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[1d9]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[1da]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[89]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[1db]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[1dc]"></a>__rt_lib_shutdown_fini_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[1dd]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[1de]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000011))

<P><STRONG><a name="[1df]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000012))

<P><STRONG><a name="[1e0]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[1e1]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[1e2]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[7d]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[1e3]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[81]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[83]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[1e4]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[85]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; MX_ADC1_Init &rArr; HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[1e5]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[90]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[88]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[1e6]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[8a]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[1e]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>COMP1_2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMP1_2_3_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMP1_2_3_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>COMP4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>CORDIC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>CRS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>DMA2_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>DMA2_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>DMA2_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>DMAMUX_OVR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>FDCAN1_IT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>FDCAN1_IT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>FMAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>PVD_PVM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>RTC_TAMP_LSECSS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM1_TRG_COM_TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>UCPD1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>USB_HP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>USB_LP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32g431xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1b8]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[1e7]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[13a]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCPA_dataLog
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_GetReg
</UL>

<P><STRONG><a name="[8c]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[1e8]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[8d]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCPA_dataLog
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[1e9]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[1ea]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[1eb]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[bb]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DAC3_Init
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC2_Init
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_MspInit
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OPAMP_MspInit
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_COMP_MspInit
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenerateMasterAccessRespond
</UL>

<P><STRONG><a name="[1ec]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[1ed]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[1ee]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[1ef]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1f0]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1f1]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[82]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[87]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[1f2]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[8e]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1f3]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[8b]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[1f4]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1f5]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[39]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32g4xx_mc_it.o(i.ADC1_2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ADC1_2_IRQHandler &rArr; TSK_HighFrequencyTask &rArr; FOC_CurrControllerM1 &rArr; RCM_ExecNextConv &rArr; LL_ADC_REG_SetSequencerRanks
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_HighFrequencyTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[1f6]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[92]"></a>ASPEP_CheckBeacon</STRONG> (Thumb, 122 bytes, Stack size 28 bytes, aspep.o(i.ASPEP_CheckBeacon))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ASPEP_CheckBeacon
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASPEP_RXframeProcess
</UL>

<P><STRONG><a name="[1bf]"></a>ASPEP_HWDMAReset</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, aspep.o(i.ASPEP_HWDMAReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ASPEP_HWDMAReset
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[9b]"></a>ASPEP_HWDataReceivedIT</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, aspep.o(i.ASPEP_HWDataReceivedIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ASPEP_HWDataReceivedIT
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel1_IRQHandler
</UL>

<P><STRONG><a name="[1be]"></a>ASPEP_HWDataTransmittedIT</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, aspep.o(i.ASPEP_HWDataTransmittedIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ASPEP_HWDataTransmittedIT
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[11]"></a>ASPEP_RXframeProcess</STRONG> (Thumb, 268 bytes, Stack size 24 bytes, aspep.o(i.ASPEP_RXframeProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ASPEP_RXframeProcess &rArr; ASPEP_sendPing &rArr; ASPEP_TXframeProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASPEP_sendPing
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASPEP_sendBeacon
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASPEP_CheckBeacon
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASPEP_sendNack
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mcp_config.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>ASPEP_getBuffer</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, aspep.o(i.ASPEP_getBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ASPEP_getBuffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mcp_config.o(.data)
</UL>
<P><STRONG><a name="[94]"></a>ASPEP_sendBeacon</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, aspep.o(i.ASPEP_sendBeacon))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ASPEP_sendBeacon &rArr; ASPEP_TXframeProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASPEP_TXframeProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASPEP_RXframeProcess
</UL>

<P><STRONG><a name="[10]"></a>ASPEP_sendPacket</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, aspep.o(i.ASPEP_sendPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ASPEP_sendPacket &rArr; ASPEP_TXframeProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASPEP_TXframeProcess
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mcp_config.o(.data)
</UL>
<P><STRONG><a name="[93]"></a>ASPEP_sendPing</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, aspep.o(i.ASPEP_sendPing))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ASPEP_sendPing &rArr; ASPEP_TXframeProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASPEP_TXframeProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASPEP_RXframeProcess
</UL>

<P><STRONG><a name="[146]"></a>ASPEP_start</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, aspep.o(i.ASPEP_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ASPEP_start
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCboot
</UL>

<P><STRONG><a name="[ba]"></a>CheckFunctionCode</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mbpdu.o(i.CheckFunctionCode))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParsingMasterAccessCommand
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenerateMasterAccessRespond
</UL>

<P><STRONG><a name="[97]"></a>CheckRTUMessageIntegrity</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, mbrtu.o(i.CheckRTUMessageIntegrity))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CheckRTUMessageIntegrity &rArr; GenerateCRC16CheckCode
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenerateCRC16CheckCode
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParsingMasterAccessCommand
</UL>

<P><STRONG><a name="[99]"></a>Circle_Limitation</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, circle_limitation.o(i.Circle_Limitation))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Circle_Limitation
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCM_Sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_CurrControllerM1
</UL>

<P><STRONG><a name="[11f]"></a>CovertSingleCommandCoilToBoolStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mbcommon.o(i.CovertSingleCommandCoilToBoolStatus))
<BR><BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleWriteSingleCoilCommand
</UL>

<P><STRONG><a name="[33]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32g4xx_mc_it.o(i.DMA1_Channel1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA1_Channel1_IRQHandler &rArr; ASPEP_HWDataReceivedIT
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASPEP_HWDataReceivedIT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[9c]"></a>EAC_Exec</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, enc_align_ctrl.o(i.EAC_Exec))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EAC_Exec
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC_SetMecAngle
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[149]"></a>EAC_Init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, enc_align_ctrl.o(i.EAC_Init))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCboot
</UL>

<P><STRONG><a name="[1b1]"></a>EAC_IsAligned</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, enc_align_ctrl.o(i.EAC_IsAligned))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[1b5]"></a>EAC_SetRestartState</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, enc_align_ctrl.o(i.EAC_SetRestartState))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_SafetyTask_PWMOFF
</UL>

<P><STRONG><a name="[9e]"></a>EAC_StartAlignment</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, enc_align_ctrl.o(i.EAC_StartAlignment))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EAC_StartAlignment &rArr; STC_ExecRamp
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_SetControlMode
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_ExecRamp
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSS_SetMecAngle
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSS_SetMecAcceleration
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[1a6]"></a>ENC_CalcAngle</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, encoder_speed_pos_fdbk.o(i.ENC_CalcAngle))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_HighFrequencyTask
</UL>

<P><STRONG><a name="[a3]"></a>ENC_CalcAvrgMecSpeedUnit</STRONG> (Thumb, 284 bytes, Stack size 32 bytes, encoder_speed_pos_fdbk.o(i.ENC_CalcAvrgMecSpeedUnit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ENC_CalcAvrgMecSpeedUnit &rArr; SPD_IsMecSpeedReliable
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPD_IsMecSpeedReliable
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[1ac]"></a>ENC_Clear</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, encoder_speed_pos_fdbk.o(i.ENC_Clear))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[1a1]"></a>ENC_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, encoder_speed_pos_fdbk.o(i.ENC_IRQHandler))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
</UL>

<P><STRONG><a name="[a5]"></a>ENC_Init</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, encoder_speed_pos_fdbk.o(i.ENC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ENC_Init &rArr; LL_TIM_IC_SetFilter
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_IC_SetFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCboot
</UL>

<P><STRONG><a name="[9d]"></a>ENC_SetMecAngle</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, encoder_speed_pos_fdbk.o(i.ENC_SetMecAngle))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAC_Exec
</UL>

<P><STRONG><a name="[d2]"></a>Error_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(i.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
</UL>

<P><STRONG><a name="[a7]"></a>FOC_CalcCurrRef</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, mc_tasks.o(i.FOC_CalcCurrRef))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = FOC_CalcCurrRef &rArr; STC_CalcTorqueReference &rArr; PI_Controller
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_CalcTorqueReference
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[a9]"></a>FOC_Clear</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, mc_tasks.o(i.FOC_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FOC_Clear
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_Clear
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMC_SwitchOffPWM
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_SetIntegralTerm
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCboot
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_SafetyTask_PWMOFF
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MF_StopProcessing
</UL>

<P><STRONG><a name="[1ad]"></a>FOC_InitAdditionalMethods</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mc_tasks.o(i.FOC_InitAdditionalMethods))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[b9]"></a>GenerateMasterAccessRespond</STRONG> (Thumb, 334 bytes, Stack size 280 bytes, mbpdu.o(i.GenerateMasterAccessRespond))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = GenerateMasterAccessRespond &rArr; ConvertBoolArrayToMBByteArray
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertRegisterArrayToMBByteArray
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertBoolArrayToMBByteArray
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFunctionCode
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyntheticSlaveAccessRespond
</UL>

<P><STRONG><a name="[119]"></a>GetCoilStatus</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mbcommon.o(i.GetCoilStatus))
<BR><BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleWriteSingleCoilCommand
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleReadCoilStatusCommand
</UL>

<P><STRONG><a name="[be]"></a>GetHoldingRegister</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, modbus_com.o(i.GetHoldingRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GetHoldingRegister &rArr; PQD_GetAvrgElMotorPowerW
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PQD_GetAvrgElMotorPowerW
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetIqdref
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetAvrgMecSpeedUnit
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleReadHoldingRegisterCommand
</UL>

<P><STRONG><a name="[11b]"></a>GetInputRegister</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mbcommon.o(i.GetInputRegister))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleReadInputRegisterCommand
</UL>

<P><STRONG><a name="[11c]"></a>GetInputStatus</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mbcommon.o(i.GetInputStatus))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleReadInputStatusCommand
</UL>

<P><STRONG><a name="[c2]"></a>HAL_ADCEx_InjectedConfigChannel</STRONG> (Thumb, 1250 bytes, Stack size 40 bytes, stm32g4xx_hal_adc_ex.o(i.HAL_ADCEx_InjectedConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_ADCEx_InjectedConfigChannel &rArr; LL_ADC_SetChannelSamplingTime
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_SetOffsetState
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_SetChannelSamplingTime
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_IsConversionOngoing
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_INJ_IsConversionOngoing
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_GetOffsetChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC2_Init
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>

<P><STRONG><a name="[c8]"></a>HAL_ADCEx_MultiModeConfigChannel</STRONG> (Thumb, 208 bytes, Stack size 144 bytes, stm32g4xx_hal_adc_ex.o(i.HAL_ADCEx_MultiModeConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = HAL_ADCEx_MultiModeConfigChannel
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_IsConversionOngoing
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>

<P><STRONG><a name="[c9]"></a>HAL_ADC_ConfigChannel</STRONG> (Thumb, 998 bytes, Stack size 40 bytes, stm32g4xx_hal_adc.o(i.HAL_ADC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_ADC_ConfigChannel &rArr; LL_ADC_SetChannelSamplingTime
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_SetOffsetState
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_SetChannelSamplingTime
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_IsConversionOngoing
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_INJ_IsConversionOngoing
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_GetOffsetChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>

<P><STRONG><a name="[cf]"></a>HAL_ADC_Init</STRONG> (Thumb, 476 bytes, Stack size 24 bytes, stm32g4xx_hal_adc.o(i.HAL_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_IsConversionOngoing
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_INJ_IsConversionOngoing
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC2_Init
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>

<P><STRONG><a name="[d0]"></a>HAL_ADC_MspInit</STRONG> (Thumb, 244 bytes, Stack size 120 bytes, stm32g4xx_hal_msp.o(i.HAL_ADC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[d4]"></a>HAL_COMP_Init</STRONG> (Thumb, 266 bytes, Stack size 24 bytes, stm32g4xx_hal_comp.o(i.HAL_COMP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_COMP_Init &rArr; HAL_COMP_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_COMP_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d5]"></a>HAL_COMP_MspInit</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, stm32g4xx_hal_msp.o(i.HAL_COMP_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_COMP_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_COMP_Init
</UL>

<P><STRONG><a name="[d6]"></a>HAL_CORDIC_Init</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32g4xx_hal_cordic.o(i.HAL_CORDIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_CORDIC_Init &rArr; HAL_CORDIC_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CORDIC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d7]"></a>HAL_CORDIC_MspInit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32g4xx_hal_msp.o(i.HAL_CORDIC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_CORDIC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CORDIC_Init
</UL>

<P><STRONG><a name="[d8]"></a>HAL_DAC_ConfigChannel</STRONG> (Thumb, 428 bytes, Stack size 32 bytes, stm32g4xx_hal_dac.o(i.HAL_DAC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_DAC_ConfigChannel &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DAC3_Init
</UL>

<P><STRONG><a name="[dc]"></a>HAL_DAC_Init</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, stm32g4xx_hal_dac.o(i.HAL_DAC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DAC_Init &rArr; HAL_DAC_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DAC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DAC3_Init
</UL>

<P><STRONG><a name="[dd]"></a>HAL_DAC_MspInit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32g4xx_hal_msp.o(i.HAL_DAC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_DAC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DAC_Init
</UL>

<P><STRONG><a name="[108]"></a>HAL_DMA_Abort</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, stm32g4xx_hal_dma.o(i.HAL_DMA_Abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_DMA_Abort
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[106]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, stm32g4xx_hal_dma.o(i.HAL_DMA_Abort_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_Abort_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[de]"></a>HAL_DMA_Init</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, stm32g4xx_hal_dma.o(i.HAL_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcDMAMUXRequestGenBaseAndMask
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcDMAMUXChannelBaseAndMask
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[da]"></a>HAL_Delay</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32g4xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DAC_ConfigChannel
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[d3]"></a>HAL_GPIO_Init</STRONG> (Thumb, 550 bytes, Stack size 56 bytes, stm32g4xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_MspInit
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OPAMP_MspInit
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_COMP_MspInit
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
</UL>

<P><STRONG><a name="[125]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32g4xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LocalSlaveProcess
</UL>

<P><STRONG><a name="[d9]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32g4xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DAC_ConfigChannel
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[19c]"></a>HAL_IncTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32g4xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[e1]"></a>HAL_Init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32g4xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e3]"></a>HAL_InitTick</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, stm32g4xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[e4]"></a>HAL_MspInit</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, stm32g4xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_DisableUCPDDeadBattery
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[113]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32g4xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_NVIC_Init
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[e6]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32g4xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_MotorControl_Init
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_NVIC_Init
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[e2]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32g4xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>

<P><STRONG><a name="[e9]"></a>HAL_OPAMP_Init</STRONG> (Thumb, 236 bytes, Stack size 24 bytes, stm32g4xx_hal_opamp.o(i.HAL_OPAMP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_OPAMP_Init &rArr; HAL_OPAMP_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OPAMP_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ea]"></a>HAL_OPAMP_MspInit</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, stm32g4xx_hal_msp.o(i.HAL_OPAMP_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_OPAMP_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OPAMP_Init
</UL>

<P><STRONG><a name="[19e]"></a>HAL_PWREx_ControlVoltageScaling</STRONG> (Thumb, 174 bytes, Stack size 0 bytes, stm32g4xx_hal_pwr_ex.o(i.HAL_PWREx_ControlVoltageScaling))
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[e7]"></a>HAL_PWREx_DisableUCPDDeadBattery</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32g4xx_hal_pwr_ex.o(i.HAL_PWREx_DisableUCPDDeadBattery))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>

<P><STRONG><a name="[d1]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 638 bytes, Stack size 32 bytes, stm32g4xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
</UL>

<P><STRONG><a name="[eb]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 444 bytes, Stack size 32 bytes, stm32g4xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[db]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32g4xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_MotorControl_Init
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DAC_ConfigChannel
</UL>

<P><STRONG><a name="[1b7]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32g4xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[1b9]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32g4xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[ec]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, stm32g4xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[ed]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1036 bytes, Stack size 32 bytes, stm32g4xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[ef]"></a>HAL_SYSTICK_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_cortex.o(i.HAL_SYSTICK_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_IRQHandler
</UL>

<P><STRONG><a name="[e5]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32g4xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_MotorControl_Init
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[ee]"></a>HAL_SYSTICK_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32g4xx_hal_cortex.o(i.HAL_SYSTICK_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[15d]"></a>HAL_TIMEx_ConfigBreakDeadTime</STRONG> (Thumb, 164 bytes, Stack size 20 bytes, stm32g4xx_hal_tim_ex.o(i.HAL_TIMEx_ConfigBreakDeadTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_TIMEx_ConfigBreakDeadTime
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[15c]"></a>HAL_TIMEx_ConfigBreakInput</STRONG> (Thumb, 202 bytes, Stack size 20 bytes, stm32g4xx_hal_tim_ex.o(i.HAL_TIMEx_ConfigBreakInput))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_TIMEx_ConfigBreakInput
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[15b]"></a>HAL_TIMEx_MasterConfigSynchronization</STRONG> (Thumb, 132 bytes, Stack size 20 bytes, stm32g4xx_hal_tim_ex.o(i.HAL_TIMEx_MasterConfigSynchronization))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[f0]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, stm32g4xx_hal_tim.o(i.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[f1]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32g4xx_hal_msp.o(i.HAL_TIM_Base_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_Base_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[f3]"></a>HAL_TIM_Encoder_Init</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, stm32g4xx_hal_tim.o(i.HAL_TIM_Encoder_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_TIM_Encoder_Init &rArr; HAL_TIM_Encoder_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_MspInit
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
</UL>

<P><STRONG><a name="[f4]"></a>HAL_TIM_Encoder_MspInit</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, stm32g4xx_hal_msp.o(i.HAL_TIM_Encoder_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_TIM_Encoder_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_Init
</UL>

<P><STRONG><a name="[f5]"></a>HAL_TIM_MspPostInit</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, stm32g4xx_hal_msp.o(i.HAL_TIM_MspPostInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_TIM_MspPostInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[f6]"></a>HAL_TIM_PWM_ConfigChannel</STRONG> (Thumb, 292 bytes, Stack size 16 bytes, stm32g4xx_hal_tim.o(i.HAL_TIM_PWM_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_TIM_PWM_ConfigChannel &rArr; TIM_OC1_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC6_SetConfig
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC5_SetConfig
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4_SetConfig
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3_SetConfig
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1_SetConfig
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[fd]"></a>HAL_TIM_PWM_Init</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, stm32g4xx_hal_tim.o(i.HAL_TIM_PWM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_TIM_PWM_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_MspInit
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[fe]"></a>HAL_TIM_PWM_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_tim.o(i.HAL_TIM_PWM_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
</UL>

<P><STRONG><a name="[ff]"></a>HAL_TIM_SlaveConfigSynchro</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, stm32g4xx_hal_tim.o(i.HAL_TIM_SlaveConfigSynchro))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_TIM_SlaveConfigSynchro &rArr; TIM_SlaveTimer_SetConfig &rArr; TIM_TI2_ConfigInputStage
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SlaveTimer_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[160]"></a>HAL_UARTEx_DisableFifoMode</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, stm32g4xx_hal_uart_ex.o(i.HAL_UARTEx_DisableFifoMode))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
</UL>

<P><STRONG><a name="[109]"></a>HAL_UARTEx_RxEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_uart.o(i.HAL_UARTEx_RxEventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT_FIFOEN
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT_FIFOEN
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT
</UL>

<P><STRONG><a name="[10d]"></a>HAL_UARTEx_RxFifoFullCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_uart_ex.o(i.HAL_UARTEx_RxFifoFullCallback))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[101]"></a>HAL_UARTEx_SetRxFifoThreshold</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32g4xx_hal_uart_ex.o(i.HAL_UARTEx_SetRxFifoThreshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_UARTEx_SetRxFifoThreshold &rArr; UARTEx_SetNbDataToProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTEx_SetNbDataToProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
</UL>

<P><STRONG><a name="[103]"></a>HAL_UARTEx_SetTxFifoThreshold</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32g4xx_hal_uart_ex.o(i.HAL_UARTEx_SetTxFifoThreshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_UARTEx_SetTxFifoThreshold &rArr; UARTEx_SetNbDataToProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTEx_SetNbDataToProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
</UL>

<P><STRONG><a name="[10c]"></a>HAL_UARTEx_TxFifoEmptyCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_uart_ex.o(i.HAL_UARTEx_TxFifoEmptyCallback))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[10a]"></a>HAL_UARTEx_WakeupCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_uart_ex.o(i.HAL_UARTEx_WakeupCallback))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[107]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_uart.o(i.HAL_UART_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT_FIFOEN
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT_FIFOEN
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAAbortOnError
</UL>

<P><STRONG><a name="[104]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 722 bytes, Stack size 24 bytes, stm32g4xx_hal_uart.o(i.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_UART_IRQHandler &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_WakeupCallback
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_TxFifoEmptyCallback
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxFifoFullCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[10e]"></a>HAL_UART_Init</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, stm32g4xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
</UL>

<P><STRONG><a name="[10f]"></a>HAL_UART_MspInit</STRONG> (Thumb, 306 bytes, Stack size 120 bytes, stm32g4xx_hal_msp.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[114]"></a>HAL_UART_Receive_IT</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, stm32g4xx_hal_uart.o(i.HAL_UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_UART_Receive_IT &rArr; UART_Start_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Start_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>

<P><STRONG><a name="[116]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, modbus_com.o(i.HAL_UART_RxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_UART_RxCpltCallback &rArr; HAL_UART_Receive_IT &rArr; UART_Start_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT_FIFOEN
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT_FIFOEN
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT
</UL>

<P><STRONG><a name="[117]"></a>HAL_UART_Transmit</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, stm32g4xx_hal_uart.o(i.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LocalSlaveProcess
</UL>

<P><STRONG><a name="[10b]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_uart.o(i.HAL_UART_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[20]"></a>HardFault_Handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32g4xx_mc_it.o(i.HardFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HardFault_Handler &rArr; TSK_HardwareFaultTask &rArr; R3_2_SwitchOffPWM
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_HardwareFaultTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[123]"></a>LocalSlaveProcess</STRONG> (Thumb, 112 bytes, Stack size 88 bytes, modbus_com.o(i.LocalSlaveProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = LocalSlaveProcess &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParsingMasterAccessCommand
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[126]"></a>MCI_Clear_Iqdref</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, mc_interface.o(i.MCI_Clear_Iqdref))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MCI_Clear_Iqdref
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_GetDefaultIqdref
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP_ReceivedPacket
</UL>

<P><STRONG><a name="[128]"></a>MCI_ExecBufferedCommands</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, mc_interface.o(i.MCI_ExecBufferedCommands))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MCI_ExecBufferedCommands &rArr; STC_ExecRamp
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_SetControlMode
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_ExecRamp
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[151]"></a>MCI_ExecSpeedRamp</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mc_interface.o(i.MCI_ExecSpeedRamp))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCboot
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSingleRegister
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_SetReg
</UL>

<P><STRONG><a name="[18f]"></a>MCI_ExecTorqueRamp</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mc_interface.o(i.MCI_ExecTorqueRamp))
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_SetReg
</UL>

<P><STRONG><a name="[129]"></a>MCI_FaultAcknowledged</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, mc_interface.o(i.MCI_FaultAcknowledged))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MCI_FaultAcknowledged
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetSTMState
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetCurrentFaults
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP_ReceivedPacket
</UL>

<P><STRONG><a name="[1a5]"></a>MCI_FaultProcessing</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mc_interface.o(i.MCI_FaultProcessing))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_SafetyTask_PWMOFF
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_HighFrequencyTask
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_HardwareFaultTask
</UL>

<P><STRONG><a name="[c1]"></a>MCI_GetAvrgMecSpeedUnit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, mc_interface.o(i.MCI_GetAvrgMecSpeedUnit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MCI_GetAvrgMecSpeedUnit
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_GetSpeedSensor
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPD_GetAvrgMecSpeedUnit
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHoldingRegister
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_GetReg
</UL>

<P><STRONG><a name="[17a]"></a>MCI_GetControlMode</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mc_interface.o(i.MCI_GetControlMode))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_GetReg
</UL>

<P><STRONG><a name="[12b]"></a>MCI_GetCurrentFaults</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mc_interface.o(i.MCI_GetCurrentFaults))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_StopMotor
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_StartMotor
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_FaultAcknowledged
</UL>

<P><STRONG><a name="[188]"></a>MCI_GetFaultState</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mc_interface.o(i.MCI_GetFaultState))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_SafetyTask_PWMOFF
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_GetReg
</UL>

<P><STRONG><a name="[17f]"></a>MCI_GetIab</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mc_interface.o(i.MCI_GetIab))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_GetReg
</UL>

<P><STRONG><a name="[180]"></a>MCI_GetIalphabeta</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mc_interface.o(i.MCI_GetIalphabeta))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_GetReg
</UL>

<P><STRONG><a name="[181]"></a>MCI_GetIqd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mc_interface.o(i.MCI_GetIqd))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_GetReg
</UL>

<P><STRONG><a name="[c0]"></a>MCI_GetIqdref</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mc_interface.o(i.MCI_GetIqdref))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHoldingRegister
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_SetReg
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_GetReg
</UL>

<P><STRONG><a name="[18b]"></a>MCI_GetLastRampFinalDuration</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mc_interface.o(i.MCI_GetLastRampFinalDuration))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_GetReg
</UL>

<P><STRONG><a name="[18a]"></a>MCI_GetLastRampFinalSpeed</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mc_interface.o(i.MCI_GetLastRampFinalSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_GetReg
</UL>

<P><STRONG><a name="[18c]"></a>MCI_GetLastRampFinalTorque</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mc_interface.o(i.MCI_GetLastRampFinalTorque))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_GetReg
</UL>

<P><STRONG><a name="[12d]"></a>MCI_GetMecSpeedRefUnit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mc_interface.o(i.MCI_GetMecSpeedRefUnit))
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_GetMecSpeedRefUnit
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_SetReg
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_GetReg
</UL>

<P><STRONG><a name="[130]"></a>MCI_GetOccurredFaults</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mc_interface.o(i.MCI_GetOccurredFaults))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_StopMotor
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_StartMotor
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[12a]"></a>MCI_GetSTMState</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mc_interface.o(i.MCI_GetSTMState))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_StopMotor
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_StartMotor
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP_ReceivedPacket
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_FaultAcknowledged
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_GetReg
</UL>

<P><STRONG><a name="[18e]"></a>MCI_GetTeref</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mc_interface.o(i.MCI_GetTeref))
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_SetReg
</UL>

<P><STRONG><a name="[183]"></a>MCI_GetValphabeta</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mc_interface.o(i.MCI_GetValphabeta))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_GetReg
</UL>

<P><STRONG><a name="[182]"></a>MCI_GetVqd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mc_interface.o(i.MCI_GetVqd))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_GetReg
</UL>

<P><STRONG><a name="[14f]"></a>MCI_Init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, mc_interface.o(i.MCI_Init))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCboot
</UL>

<P><STRONG><a name="[19b]"></a>MCI_IsCommandAcknowledged</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mc_interface.o(i.MCI_IsCommandAcknowledged))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSingleRegister
</UL>

<P><STRONG><a name="[193]"></a>MCI_SetCurrentReferences</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mc_interface.o(i.MCI_SetCurrentReferences))
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_SetReg
</UL>

<P><STRONG><a name="[12f]"></a>MCI_StartMotor</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, mc_interface.o(i.MCI_StartMotor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MCI_StartMotor
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetSTMState
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetOccurredFaults
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetCurrentFaults
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSingleRegister
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP_ReceivedPacket
</UL>

<P><STRONG><a name="[131]"></a>MCI_StopMotor</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, mc_interface.o(i.MCI_StopMotor))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MCI_StopMotor
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetSTMState
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetOccurredFaults
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetCurrentFaults
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSingleRegister
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP_ReceivedPacket
</UL>

<P><STRONG><a name="[132]"></a>MCI_StopRamp</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mc_interface.o(i.MCI_StopRamp))
<BR><BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_StopRamp
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP_ReceivedPacket
</UL>

<P><STRONG><a name="[b3]"></a>MCM_Clarke</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, mc_math.o(i.MCM_Clarke))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_CurrControllerM1
</UL>

<P><STRONG><a name="[b4]"></a>MCM_Park</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, mc_math.o(i.MCM_Park))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MCM_Park
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCM_Trig_Functions
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_CurrControllerM1
</UL>

<P><STRONG><a name="[b7]"></a>MCM_Rev_Park</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, mc_math.o(i.MCM_Rev_Park))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MCM_Rev_Park
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCM_Trig_Functions
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_CurrControllerM1
</UL>

<P><STRONG><a name="[9a]"></a>MCM_Sqrt</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, mc_math.o(i.MCM_Sqrt))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Circle_Limitation
</UL>

<P><STRONG><a name="[134]"></a>MCM_Trig_Functions</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mc_math.o(i.MCM_Trig_Functions))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCM_Rev_Park
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCM_Park
</UL>

<P><STRONG><a name="[135]"></a>MCPA_cfgLog</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, mcpa.o(i.MCPA_cfgLog))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MCPA_cfgLog &rArr; MCPA_stopDataLog
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_GetPtrReg
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_GetIDSize
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCPA_stopDataLog
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_SetReg
</UL>

<P><STRONG><a name="[139]"></a>MCPA_dataLog</STRONG> (Thumb, 364 bytes, Stack size 16 bytes, mcpa.o(i.MCPA_dataLog))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MCPA_dataLog &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_HighFrequencyTask
</UL>

<P><STRONG><a name="[1b6]"></a>MCPA_flushDataLog</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, mcpa.o(i.MCPA_flushDataLog))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MCPA_flushDataLog
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_SafetyTask_PWMOFF
</UL>

<P><STRONG><a name="[13b]"></a>MCP_ReceivedPacket</STRONG> (Thumb, 280 bytes, Stack size 24 bytes, mcp.o(i.MCP_ReceivedPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = MCP_ReceivedPacket &rArr; RI_SetRegCommandParser &rArr; RI_SetReg &rArr; MCPA_cfgLog &rArr; MCPA_stopDataLog
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_StopMotor
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_StartMotor
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_ProfilerCommand
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_StopRamp
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetSTMState
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_FaultAcknowledged
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Clear_Iqdref
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_SetRegCommandParser
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_GetRegCommandParser
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Scheduler
</UL>

<P><STRONG><a name="[152]"></a>MC_APP_BootHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mc_app_hooks.o(i.MC_APP_BootHook))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCboot
</UL>

<P><STRONG><a name="[143]"></a>MC_APP_PostMediumFrequencyHook_M1</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mc_app_hooks.o(i.MC_APP_PostMediumFrequencyHook_M1))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Scheduler
</UL>

<P><STRONG><a name="[13e]"></a>MC_ProfilerCommand</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mc_api.o(i.MC_ProfilerCommand))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP_ReceivedPacket
</UL>

<P><STRONG><a name="[13f]"></a>MC_RunMotorControlTasks</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, mc_tasks.o(i.MC_RunMotorControlTasks))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = MC_RunMotorControlTasks &rArr; MC_Scheduler &rArr; MCP_ReceivedPacket &rArr; RI_SetRegCommandParser &rArr; RI_SetReg &rArr; MCPA_cfgLog &rArr; MCPA_stopDataLog
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_SafetyTask
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Scheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[140]"></a>MC_Scheduler</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, mc_tasks.o(i.MC_Scheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = MC_Scheduler &rArr; MCP_ReceivedPacket &rArr; RI_SetRegCommandParser &rArr; RI_SetReg &rArr; MCPA_cfgLog &rArr; MCPA_stopDataLog
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_APP_PostMediumFrequencyHook_M1
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP_ReceivedPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_RunMotorControlTasks
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_BRK_TIM15_IRQHandler
</UL>

<P><STRONG><a name="[144]"></a>MCboot</STRONG> (Thumb, 218 bytes, Stack size 32 bytes, mc_tasks.o(i.MCboot))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MCboot &rArr; R3_2_Init &rArr; R3_2_TIMxInit
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_ExecSpeedRamp
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Clear
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startTimers
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSS_Init
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_Init
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_GetMecSpeedRefUnitDefault
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_GetDefaultIqdref
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVBS_Init
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMNG_Init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R3_2_Init
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_HandleInit
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTC_Init
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_APP_BootHook
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC_Init
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAC_Init
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASPEP_start
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_MotorControl_Init
</UL>

<P><STRONG><a name="[157]"></a>MX_MotorControl_Init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, motorcontrol.o(i.MX_MotorControl_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MX_MotorControl_Init &rArr; MCboot &rArr; R3_2_Init &rArr; R3_2_TIMxInit
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_lock_pins
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCboot
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[162]"></a>NTC_CalcAvTemp</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, ntc_temperature_sensor.o(i.NTC_CalcAvTemp))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = NTC_CalcAvTemp &rArr; RCM_ExecRegularConv &rArr; LL_ADC_REG_SetSequencerRanks
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_ExecRegularConv
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTC_SetFaultState
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_SafetyTask_PWMOFF
</UL>

<P><STRONG><a name="[166]"></a>NTC_Clear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ntc_temperature_sensor.o(i.NTC_Clear))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTC_Init
</UL>

<P><STRONG><a name="[17e]"></a>NTC_GetAvTemp_C</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ntc_temperature_sensor.o(i.NTC_GetAvTemp_C))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_GetReg
</UL>

<P><STRONG><a name="[14d]"></a>NTC_Init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ntc_temperature_sensor.o(i.NTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = NTC_Init &rArr; RCM_RegisterRegConv
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_RegisterRegConv
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTC_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCboot
</UL>

<P><STRONG><a name="[164]"></a>NTC_SetFaultState</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ntc_temperature_sensor.o(i.NTC_SetFaultState))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTC_CalcAvTemp
</UL>

<P><STRONG><a name="[17d]"></a>PID_GetKD</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pid_regulator.o(i.PID_GetKD))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_GetReg
</UL>

<P><STRONG><a name="[187]"></a>PID_GetKDDivisorPOW2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pid_regulator.o(i.PID_GetKDDivisorPOW2))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_GetReg
</UL>

<P><STRONG><a name="[17c]"></a>PID_GetKI</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pid_regulator.o(i.PID_GetKI))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_GetReg
</UL>

<P><STRONG><a name="[186]"></a>PID_GetKIDivisorPOW2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pid_regulator.o(i.PID_GetKIDivisorPOW2))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_GetReg
</UL>

<P><STRONG><a name="[17b]"></a>PID_GetKP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pid_regulator.o(i.PID_GetKP))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_GetReg
</UL>

<P><STRONG><a name="[185]"></a>PID_GetKPDivisorPOW2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pid_regulator.o(i.PID_GetKPDivisorPOW2))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_GetReg
</UL>

<P><STRONG><a name="[148]"></a>PID_HandleInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, pid_regulator.o(i.PID_HandleInit))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCboot
</UL>

<P><STRONG><a name="[aa]"></a>PID_SetIntegralTerm</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pid_regulator.o(i.PID_SetIntegralTerm))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Clear
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_Clear
</UL>

<P><STRONG><a name="[192]"></a>PID_SetKD</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pid_regulator.o(i.PID_SetKD))
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_SetReg
</UL>

<P><STRONG><a name="[195]"></a>PID_SetKDDivisorPOW2</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pid_regulator.o(i.PID_SetKDDivisorPOW2))
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_SetReg
</UL>

<P><STRONG><a name="[191]"></a>PID_SetKI</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pid_regulator.o(i.PID_SetKI))
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_SetReg
</UL>

<P><STRONG><a name="[167]"></a>PID_SetKIDivisorPOW2</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, pid_regulator.o(i.PID_SetKIDivisorPOW2))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PID_SetKIDivisorPOW2
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_SetUpperIntegralTermLimit
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_SetLowerIntegralTermLimit
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_SetReg
</UL>

<P><STRONG><a name="[190]"></a>PID_SetKP</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pid_regulator.o(i.PID_SetKP))
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_SetReg
</UL>

<P><STRONG><a name="[194]"></a>PID_SetKPDivisorPOW2</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pid_regulator.o(i.PID_SetKPDivisorPOW2))
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_SetReg
</UL>

<P><STRONG><a name="[169]"></a>PID_SetLowerIntegralTermLimit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pid_regulator.o(i.PID_SetLowerIntegralTermLimit))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_SetKIDivisorPOW2
</UL>

<P><STRONG><a name="[168]"></a>PID_SetUpperIntegralTermLimit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pid_regulator.o(i.PID_SetUpperIntegralTermLimit))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_SetKIDivisorPOW2
</UL>

<P><STRONG><a name="[b5]"></a>PI_Controller</STRONG> (Thumb, 118 bytes, Stack size 20 bytes, pid_regulator.o(i.PI_Controller))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = PI_Controller
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_CalcTorqueReference
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_CurrControllerM1
</UL>

<P><STRONG><a name="[1aa]"></a>PQD_CalcElMotorPower</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, pqd_motor_power_measurement.o(i.PQD_CalcElMotorPower))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[1a8]"></a>PQD_Clear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pqd_motor_power_measurement.o(i.PQD_Clear))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_SafetyTask_PWMOFF
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MF_StopProcessing
</UL>

<P><STRONG><a name="[bf]"></a>PQD_GetAvrgElMotorPowerW</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, pqd_motor_power_measurement.o(i.PQD_GetAvrgElMotorPowerW))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PQD_GetAvrgElMotorPowerW
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VBS_GetAvBusVoltage_V
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHoldingRegister
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_GetReg
</UL>

<P><STRONG><a name="[1b4]"></a>PWMC_CheckOverCurrent</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pwm_curr_fdbk.o(i.PWMC_CheckOverCurrent))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_SafetyTask_PWMOFF
</UL>

<P><STRONG><a name="[16b]"></a>PWMC_CurrentReadingCalibr</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, pwm_curr_fdbk.o(i.PWMC_CurrentReadingCalibr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PWMC_CurrentReadingCalibr
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMC_SwitchOffPWM
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[b0]"></a>PWMC_GetPhaseCurrents</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pwm_curr_fdbk.o(i.PWMC_GetPhaseCurrents))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_CurrControllerM1
</UL>

<P><STRONG><a name="[b8]"></a>PWMC_SetPhaseVoltage</STRONG> (Thumb, 468 bytes, Stack size 8 bytes, pwm_curr_fdbk.o(i.PWMC_SetPhaseVoltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PWMC_SetPhaseVoltage
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_CurrControllerM1
</UL>

<P><STRONG><a name="[ac]"></a>PWMC_SwitchOffPWM</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pwm_curr_fdbk.o(i.PWMC_SwitchOffPWM))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_SafetyTask_PWMOFF
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Clear
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMC_CurrentReadingCalibr
</UL>

<P><STRONG><a name="[1b2]"></a>PWMC_SwitchOnPWM</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pwm_curr_fdbk.o(i.PWMC_SwitchOnPWM))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[124]"></a>ParsingMasterAccessCommand</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, mbrtuslave.o(i.ParsingMasterAccessCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ParsingMasterAccessCommand &rArr; CheckRTUMessageIntegrity &rArr; GenerateCRC16CheckCode
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFunctionCode
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckRTUMessageIntegrity
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LocalSlaveProcess
</UL>

<P><STRONG><a name="[1a0]"></a>R3_2_BRK2_IRQHandler</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, r3_2_g4xx_pwm_curr_fdbk.o(i.R3_2_BRK2_IRQHandler))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_BRK_TIM15_IRQHandler
</UL>

<P><STRONG><a name="[19f]"></a>R3_2_BRK_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, r3_2_g4xx_pwm_curr_fdbk.o(i.R3_2_BRK_IRQHandler))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_BRK_TIM15_IRQHandler
</UL>

<P><STRONG><a name="[6]"></a>R3_2_CurrentReadingPolarization</STRONG> (Thumb, 342 bytes, Stack size 48 bytes, r3_2_g4xx_pwm_curr_fdbk.o(i.R3_2_CurrentReadingPolarization))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = R3_2_CurrentReadingPolarization &rArr; waitForPolarizationEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R3_2_SwitchOnPWM
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R3_2_SwitchOffPWM
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_EnablePreload
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_DisablePreload
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_INJ_StartConversion
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;waitForPolarizationEnd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mc_config.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>R3_2_GetOffsetCalib</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, r3_2_g4xx_pwm_curr_fdbk.o(i.R3_2_GetOffsetCalib))
<BR>[Address Reference Count : 1]<UL><LI> mc_config.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>R3_2_GetPhaseCurrents</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, r3_2_g4xx_pwm_curr_fdbk.o(i.R3_2_GetPhaseCurrents))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = R3_2_GetPhaseCurrents
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_SetTriggerOutput
</UL>
<BR>[Address Reference Count : 2]<UL><LI> mc_config.o(.data)
<LI> r3_2_g4xx_pwm_curr_fdbk.o(i.R3_2_RLDetectionModeDisable)
</UL>
<P><STRONG><a name="[145]"></a>R3_2_Init</STRONG> (Thumb, 422 bytes, Stack size 48 bytes, r3_2_g4xx_pwm_curr_fdbk.o(i.R3_2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = R3_2_Init &rArr; R3_2_TIMxInit
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R3_2_TIMxInit
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R3_2_SetAOReferenceVoltage
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R3_2_ADCxInit
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCboot
</UL>

<P><STRONG><a name="[9]"></a>R3_2_IsOverCurrentOccurred</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, r3_2_g4xx_pwm_curr_fdbk.o(i.R3_2_IsOverCurrentOccurred))
<BR>[Address Reference Count : 1]<UL><LI> mc_config.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>R3_2_RLDetectionModeDisable</STRONG> (Thumb, 224 bytes, Stack size 16 bytes, r3_2_g4xx_pwm_curr_fdbk.o(i.R3_2_RLDetectionModeDisable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = R3_2_RLDetectionModeDisable &rArr; LL_TIM_OC_SetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_SetMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mc_config.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>R3_2_RLDetectionModeEnable</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, r3_2_g4xx_pwm_curr_fdbk.o(i.R3_2_RLDetectionModeEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = R3_2_RLDetectionModeEnable &rArr; LL_TIM_OC_SetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_SetMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mc_config.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>R3_2_RLDetectionModeSetDuty</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, r3_2_g4xx_pwm_curr_fdbk.o(i.R3_2_RLDetectionModeSetDuty))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = R3_2_RLDetectionModeSetDuty &rArr; LL_TIM_OC_SetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_SetTriggerOutput
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_SetMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mc_config.o(.data)
</UL>
<P><STRONG><a name="[72]"></a>R3_2_SetADCSampPointPolarization</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, r3_2_g4xx_pwm_curr_fdbk.o(i.R3_2_SetADCSampPointPolarization))
<BR><BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R3_2_WriteTIMRegisters
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r3_2_g4xx_pwm_curr_fdbk.o(i.R3_2_CurrentReadingPolarization)
</UL>
<P><STRONG><a name="[8]"></a>R3_2_SetADCSampPointSectX</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, r3_2_g4xx_pwm_curr_fdbk.o(i.R3_2_SetADCSampPointSectX))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = R3_2_SetADCSampPointSectX
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R3_2_WriteTIMRegisters
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mc_config.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>R3_2_SetOffsetCalib</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, r3_2_g4xx_pwm_curr_fdbk.o(i.R3_2_SetOffsetCalib))
<BR>[Address Reference Count : 1]<UL><LI> mc_config.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>R3_2_SwitchOffPWM</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, r3_2_g4xx_pwm_curr_fdbk.o(i.R3_2_SwitchOffPWM))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = R3_2_SwitchOffPWM
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_HardwareFaultTask
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MF_StopProcessing
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R3_2_CurrentReadingPolarization
</UL>
<BR>[Address Reference Count : 3]<UL><LI> mc_config.o(.data)
<LI> r3_2_g4xx_pwm_curr_fdbk.o(i.R3_2_RLDetectionModeDisable)
<LI> r3_2_g4xx_pwm_curr_fdbk.o(i.R3_2_RLDetectionModeEnable)
</UL>
<P><STRONG><a name="[5]"></a>R3_2_SwitchOnPWM</STRONG> (Thumb, 174 bytes, Stack size 12 bytes, r3_2_g4xx_pwm_curr_fdbk.o(i.R3_2_SwitchOnPWM))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = R3_2_SwitchOnPWM
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R3_2_CurrentReadingPolarization
</UL>
<BR>[Address Reference Count : 2]<UL><LI> mc_config.o(.data)
<LI> r3_2_g4xx_pwm_curr_fdbk.o(i.R3_2_RLDetectionModeDisable)
</UL>
<P><STRONG><a name="[176]"></a>R3_2_TIMx_UP_IRQHandler</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, r3_2_g4xx_pwm_curr_fdbk.o(i.R3_2_TIMx_UP_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = R3_2_TIMx_UP_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_SetTriggerOutput
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_TIM16_IRQHandler
</UL>

<P><STRONG><a name="[7]"></a>R3_2_TurnOnLowSides</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, r3_2_g4xx_pwm_curr_fdbk.o(i.R3_2_TurnOnLowSides))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = R3_2_TurnOnLowSides
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>
<BR>[Address Reference Count : 2]<UL><LI> mc_config.o(.data)
<LI> r3_2_g4xx_pwm_curr_fdbk.o(i.R3_2_RLDetectionModeDisable)
</UL>
<P><STRONG><a name="[b2]"></a>RCM_ExecNextConv</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, regular_conversion_manager.o(i.RCM_ExecNextConv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RCM_ExecNextConv &rArr; LL_ADC_REG_SetSequencerRanks
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_SetSequencerRanks
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_CurrControllerM1
</UL>

<P><STRONG><a name="[163]"></a>RCM_ExecRegularConv</STRONG> (Thumb, 282 bytes, Stack size 24 bytes, regular_conversion_manager.o(i.RCM_ExecRegularConv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RCM_ExecRegularConv &rArr; LL_ADC_REG_SetSequencerRanks
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_SetSequencerRanks
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVBS_CalcAvVbus
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_ExecUserConv
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTC_CalcAvTemp
</UL>

<P><STRONG><a name="[178]"></a>RCM_ExecUserConv</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, regular_conversion_manager.o(i.RCM_ExecUserConv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RCM_ExecUserConv &rArr; RCM_ExecRegularConv &rArr; LL_ADC_REG_SetSequencerRanks
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_ExecRegularConv
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_SafetyTask
</UL>

<P><STRONG><a name="[b1]"></a>RCM_ReadOngoingConv</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, regular_conversion_manager.o(i.RCM_ReadOngoingConv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCM_ReadOngoingConv
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_CurrControllerM1
</UL>

<P><STRONG><a name="[165]"></a>RCM_RegisterRegConv</STRONG> (Thumb, 256 bytes, Stack size 16 bytes, regular_conversion_manager.o(i.RCM_RegisterRegConv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RCM_RegisterRegConv
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVBS_Init
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTC_Init
</UL>

<P><STRONG><a name="[14e]"></a>REMNG_Init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ramp_ext_mngr.o(i.REMNG_Init))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCboot
</UL>

<P><STRONG><a name="[137]"></a>RI_GetIDSize</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, register_interface.o(i.RI_GetIDSize))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCPA_cfgLog
</UL>

<P><STRONG><a name="[136]"></a>RI_GetPtrReg</STRONG> (Thumb, 182 bytes, Stack size 8 bytes, register_interface.o(i.RI_GetPtrReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RI_GetPtrReg
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCPA_cfgLog
</UL>

<P><STRONG><a name="[13d]"></a>RI_GetRegCommandParser</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, register_interface.o(i.RI_GetRegCommandParser))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = RI_GetRegCommandParser &rArr; RI_GetReg &rArr; RI_MovString
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_GetReg
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP_ReceivedPacket
</UL>

<P><STRONG><a name="[13c]"></a>RI_SetRegCommandParser</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, register_interface.o(i.RI_SetRegCommandParser))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = RI_SetRegCommandParser &rArr; RI_SetReg &rArr; MCPA_cfgLog &rArr; MCPA_stopDataLog
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_SetReg
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP_ReceivedPacket
</UL>

<P><STRONG><a name="[196]"></a>RVBS_CalcAvVbus</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, r_divider_bus_voltage_sensor.o(i.RVBS_CalcAvVbus))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RVBS_CalcAvVbus &rArr; RCM_ExecRegularConv &rArr; LL_ADC_REG_SetSequencerRanks
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_ExecRegularConv
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVBS_CheckFaultState
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_SafetyTask_PWMOFF
</UL>

<P><STRONG><a name="[197]"></a>RVBS_CheckFaultState</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, r_divider_bus_voltage_sensor.o(i.RVBS_CheckFaultState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RVBS_CheckFaultState
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVBS_CalcAvVbus
</UL>

<P><STRONG><a name="[198]"></a>RVBS_Clear</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, r_divider_bus_voltage_sensor.o(i.RVBS_Clear))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVBS_Init
</UL>

<P><STRONG><a name="[14c]"></a>RVBS_Init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, r_divider_bus_voltage_sensor.o(i.RVBS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RVBS_Init &rArr; RCM_RegisterRegConv
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_RegisterRegConv
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVBS_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCboot
</UL>

<P><STRONG><a name="[12c]"></a>SPD_GetAvrgMecSpeedUnit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, speed_pos_fdbk.o(i.SPD_GetAvrgMecSpeedUnit))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetAvrgMecSpeedUnit
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_ForceSpeedReferenceToCurrentSpeed
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_CalcTorqueReference
</UL>

<P><STRONG><a name="[af]"></a>SPD_GetElAngle</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, speed_pos_fdbk.o(i.SPD_GetElAngle))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_CurrControllerM1
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_GetReg
</UL>

<P><STRONG><a name="[b6]"></a>SPD_GetInstElSpeedDpp</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, speed_pos_fdbk.o(i.SPD_GetInstElSpeedDpp))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_CurrControllerM1
</UL>

<P><STRONG><a name="[184]"></a>SPD_GetS16Speed</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, speed_pos_fdbk.o(i.SPD_GetS16Speed))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_GetReg
</UL>

<P><STRONG><a name="[a4]"></a>SPD_IsMecSpeedReliable</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, speed_pos_fdbk.o(i.SPD_IsMecSpeedReliable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPD_IsMecSpeedReliable
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC_CalcAvrgMecSpeedUnit
</UL>

<P><STRONG><a name="[a8]"></a>STC_CalcTorqueReference</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, speed_torq_ctrl.o(i.STC_CalcTorqueReference))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = STC_CalcTorqueReference &rArr; PI_Controller
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PI_Controller
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPD_GetAvrgMecSpeedUnit
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_CalcCurrRef
</UL>

<P><STRONG><a name="[ab]"></a>STC_Clear</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, speed_torq_ctrl.o(i.STC_Clear))
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_SetIntegralTerm
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Clear
</UL>

<P><STRONG><a name="[a2]"></a>STC_ExecRamp</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, speed_torq_ctrl.o(i.STC_ExecRamp))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = STC_ExecRamp
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_GetTorqueRef
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_ExecBufferedCommands
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAC_StartAlignment
</UL>

<P><STRONG><a name="[19a]"></a>STC_ForceSpeedReferenceToCurrentSpeed</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, speed_torq_ctrl.o(i.STC_ForceSpeedReferenceToCurrentSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = STC_ForceSpeedReferenceToCurrentSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPD_GetAvrgMecSpeedUnit
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[127]"></a>STC_GetDefaultIqdref</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, speed_torq_ctrl.o(i.STC_GetDefaultIqdref))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCboot
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Clear_Iqdref
</UL>

<P><STRONG><a name="[12e]"></a>STC_GetMecSpeedRefUnit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, speed_torq_ctrl.o(i.STC_GetMecSpeedRefUnit))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetMecSpeedRefUnit
</UL>

<P><STRONG><a name="[150]"></a>STC_GetMecSpeedRefUnitDefault</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, speed_torq_ctrl.o(i.STC_GetMecSpeedRefUnitDefault))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCboot
</UL>

<P><STRONG><a name="[ae]"></a>STC_GetSpeedSensor</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, speed_torq_ctrl.o(i.STC_GetSpeedSensor))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetAvrgMecSpeedUnit
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_CurrControllerM1
</UL>

<P><STRONG><a name="[199]"></a>STC_GetTorqueRef</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, speed_torq_ctrl.o(i.STC_GetTorqueRef))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_ExecRamp
</UL>

<P><STRONG><a name="[14a]"></a>STC_Init</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, speed_torq_ctrl.o(i.STC_Init))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCboot
</UL>

<P><STRONG><a name="[a1]"></a>STC_SetControlMode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, speed_torq_ctrl.o(i.STC_SetControlMode))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_ExecBufferedCommands
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAC_StartAlignment
</UL>

<P><STRONG><a name="[1b0]"></a>STC_SetSpeedSensor</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, speed_torq_ctrl.o(i.STC_SetSpeedSensor))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[133]"></a>STC_StopRamp</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, speed_torq_ctrl.o(i.STC_StopRamp))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_StopRamp
</UL>

<P><STRONG><a name="[11d]"></a>SetMultipleCoil</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mbcommon.o(i.SetMultipleCoil))
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleWriteMultipleCoilCommand
</UL>

<P><STRONG><a name="[11e]"></a>SetMultipleRegister</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mbcommon.o(i.SetMultipleRegister))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleWriteMultipleRegisterCommand
</UL>

<P><STRONG><a name="[120]"></a>SetSingleCoil</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mbcommon.o(i.SetSingleCoil))
<BR><BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleWriteSingleCoilCommand
</UL>

<P><STRONG><a name="[121]"></a>SetSingleRegister</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, modbus_com.o(i.SetSingleRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SetSingleRegister &rArr; MCI_StopMotor
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_StopMotor
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_StartMotor
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_IsCommandAcknowledged
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_ExecSpeedRamp
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleWriteSingleRegisterCommand
</UL>

<P><STRONG><a name="[11a]"></a>SyntheticSlaveAccessRespond</STRONG> (Thumb, 62 bytes, Stack size 272 bytes, mbrtu.o(i.SyntheticSlaveAccessRespond))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = SyntheticSlaveAccessRespond &rArr; GenerateMasterAccessRespond &rArr; ConvertBoolArrayToMBByteArray
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenerateMasterAccessRespond
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenerateCRC16CheckCode
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleWriteSingleRegisterCommand
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleWriteSingleCoilCommand
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleWriteMultipleRegisterCommand
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleWriteMultipleCoilCommand
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleReadInputStatusCommand
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleReadInputRegisterCommand
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleReadHoldingRegisterCommand
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleReadCoilStatusCommand
</UL>

<P><STRONG><a name="[27]"></a>SysTick_Handler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32g4xx_mc_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SysTick_Handler &rArr; MC_RunMotorControlTasks &rArr; MC_Scheduler &rArr; MCP_ReceivedPacket &rArr; RI_SetRegCommandParser &rArr; RI_SetReg &rArr; MCPA_cfgLog &rArr; MCPA_stopDataLog
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_RunMotorControlTasks
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_IRQHandler
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[19d]"></a>SystemClock_Config</STRONG> (Thumb, 102 bytes, Stack size 88 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_ControlVoltageScaling
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6e]"></a>SystemInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, system_stm32g4xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(.text)
</UL>
<P><STRONG><a name="[3f]"></a>TIM1_BRK_TIM15_IRQHandler</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32g4xx_mc_it.o(i.TIM1_BRK_TIM15_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = TIM1_BRK_TIM15_IRQHandler &rArr; MC_Scheduler &rArr; MCP_ReceivedPacket &rArr; RI_SetRegCommandParser &rArr; RI_SetReg &rArr; MCPA_cfgLog &rArr; MCPA_stopDataLog
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Scheduler
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R3_2_BRK_IRQHandler
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R3_2_BRK2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM1_UP_TIM16_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32g4xx_mc_it.o(i.TIM1_UP_TIM16_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM1_UP_TIM16_IRQHandler &rArr; R3_2_TIMx_UP_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R3_2_TIMx_UP_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>TIM4_IRQHandler</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32g4xx_mc_it.o(i.TIM4_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[f2]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 146 bytes, Stack size 28 bytes, stm32g4xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_Init
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[1a2]"></a>TIM_ETR_SetConfig</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32g4xx_hal_tim.o(i.TIM_ETR_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_ETR_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SlaveTimer_SetConfig
</UL>

<P><STRONG><a name="[f8]"></a>TIM_OC2_SetConfig</STRONG> (Thumb, 120 bytes, Stack size 20 bytes, stm32g4xx_hal_tim.o(i.TIM_OC2_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_OC2_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[1af]"></a>TSK_ChargeBootCapDelayHasElapsedM1</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mc_tasks.o(i.TSK_ChargeBootCapDelayHasElapsedM1))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[122]"></a>TSK_HardwareFaultTask</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mc_tasks.o(i.TSK_HardwareFaultTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TSK_HardwareFaultTask &rArr; R3_2_SwitchOffPWM
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_FaultProcessing
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R3_2_SwitchOffPWM
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[91]"></a>TSK_HighFrequencyTask</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, mc_tasks.o(i.TSK_HighFrequencyTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = TSK_HighFrequencyTask &rArr; FOC_CurrControllerM1 &rArr; RCM_ExecNextConv &rArr; LL_ADC_REG_SetSequencerRanks
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCPA_dataLog
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_FaultProcessing
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC_CalcAngle
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_CurrControllerM1
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>

<P><STRONG><a name="[1a7]"></a>TSK_MF_StopProcessing</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, mc_tasks.o(i.TSK_MF_StopProcessing))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TSK_MF_StopProcessing &rArr; FOC_Clear
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_SetStopPermanencyTimeM1
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Clear
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PQD_Clear
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R3_2_SwitchOffPWM
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[142]"></a>TSK_MediumFrequencyTaskM1</STRONG> (Thumb, 542 bytes, Stack size 40 bytes, mc_tasks.o(i.TSK_MediumFrequencyTaskM1))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = TSK_MediumFrequencyTaskM1 &rArr; ENC_CalcAvrgMecSpeedUnit &rArr; SPD_IsMecSpeedReliable
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_StopPermanencyTimeHasElapsedM1
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_SetStopPermanencyTimeM1
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_SetChargeBootCapDelayM1
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_ChargeBootCapDelayHasElapsedM1
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_InitAdditionalMethods
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Clear
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_CalcCurrRef
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_SetSpeedSensor
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_SetControlMode
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_ForceSpeedReferenceToCurrentSpeed
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_CalcTorqueReference
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMC_SwitchOnPWM
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMC_CurrentReadingCalibr
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PQD_Clear
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PQD_CalcElMotorPower
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_ExecBufferedCommands
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC_Clear
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC_CalcAvrgMecSpeedUnit
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAC_StartAlignment
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAC_IsAligned
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAC_Exec
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MF_StopProcessing
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R3_2_TurnOnLowSides
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R3_2_SwitchOnPWM
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R3_2_SwitchOffPWM
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetOccurredFaults
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetCurrentFaults
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Scheduler
</UL>

<P><STRONG><a name="[141]"></a>TSK_SafetyTask</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, mc_tasks.o(i.TSK_SafetyTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = TSK_SafetyTask &rArr; TSK_SafetyTask_PWMOFF &rArr; RVBS_CalcAvVbus &rArr; RCM_ExecRegularConv &rArr; LL_ADC_REG_SetSequencerRanks
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_SafetyTask_PWMOFF
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_ExecUserConv
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_RunMotorControlTasks
</UL>

<P><STRONG><a name="[1b3]"></a>TSK_SafetyTask_PWMOFF</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, mc_tasks.o(i.TSK_SafetyTask_PWMOFF))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = TSK_SafetyTask_PWMOFF &rArr; RVBS_CalcAvVbus &rArr; RCM_ExecRegularConv &rArr; LL_ADC_REG_SetSequencerRanks
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Clear
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVBS_CalcAvVbus
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMC_SwitchOffPWM
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMC_CheckOverCurrent
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PQD_Clear
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTC_CalcAvTemp
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCPA_flushDataLog
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetFaultState
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_FaultProcessing
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAC_SetRestartState
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_SafetyTask
</UL>

<P><STRONG><a name="[1ae]"></a>TSK_SetChargeBootCapDelayM1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mc_tasks.o(i.TSK_SetChargeBootCapDelayM1))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[1a9]"></a>TSK_SetStopPermanencyTimeM1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mc_tasks.o(i.TSK_SetStopPermanencyTimeM1))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MF_StopProcessing
</UL>

<P><STRONG><a name="[1ab]"></a>TSK_StopPermanencyTimeHasElapsedM1</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mc_tasks.o(i.TSK_StopPermanencyTimeHasElapsedM1))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[111]"></a>UART_AdvFeatureConfig</STRONG> (Thumb, 200 bytes, Stack size 0 bytes, stm32g4xx_hal_uart.o(i.UART_AdvFeatureConfig))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[112]"></a>UART_CheckIdleState</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, stm32g4xx_hal_uart.o(i.UART_CheckIdleState))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UART_CheckIdleState &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[110]"></a>UART_SetConfig</STRONG> (Thumb, 582 bytes, Stack size 24 bytes, stm32g4xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[115]"></a>UART_Start_Receive_IT</STRONG> (Thumb, 262 bytes, Stack size 16 bytes, stm32g4xx_hal_uart.o(i.UART_Start_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_Start_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
</UL>

<P><STRONG><a name="[118]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, stm32g4xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[1bb]"></a>UASPEP_DAMCONFIG_RX</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, usart_aspep_driver.o(i.UASPEP_DAMCONFIG_RX))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UASPEP_DAMCONFIG_RX
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UASPEP_INIT
</UL>

<P><STRONG><a name="[1ba]"></a>UASPEP_DAMCONFIG_TX</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, usart_aspep_driver.o(i.UASPEP_DAMCONFIG_TX))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = UASPEP_DAMCONFIG_TX
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UASPEP_INIT
</UL>

<P><STRONG><a name="[13]"></a>UASPEP_IDLE_ENABLE</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, usart_aspep_driver.o(i.UASPEP_IDLE_ENABLE))
<BR>[Address Reference Count : 1]<UL><LI> mcp_config.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>UASPEP_INIT</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usart_aspep_driver.o(i.UASPEP_INIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = UASPEP_INIT &rArr; UASPEP_DAMCONFIG_TX
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UASPEP_DAMCONFIG_TX
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UASPEP_DAMCONFIG_RX
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mcp_config.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>UASPEP_RECEIVE_BUFFER</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, usart_aspep_driver.o(i.UASPEP_RECEIVE_BUFFER))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UASPEP_RECEIVE_BUFFER
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetDataLength
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_EnableChannel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mcp_config.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>UASPEP_SEND_PACKET</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, usart_aspep_driver.o(i.UASPEP_SEND_PACKET))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UASPEP_SEND_PACKET
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetDataLength
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_EnableChannel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mcp_config.o(.data)
</UL>
<P><STRONG><a name="[4d]"></a>USART2_IRQHandler</STRONG> (Thumb, 224 bytes, Stack size 8 bytes, stm32g4xx_mc_it.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART2_IRQHandler &rArr; ASPEP_HWDataTransmittedIT
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASPEP_HWDataTransmittedIT
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASPEP_HWDMAReset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>USART3_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32g4xx_it.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USART3_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[16a]"></a>VBS_GetAvBusVoltage_V</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bus_voltage_sensor.o(i.VBS_GetAvBusVoltage_V))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PQD_GetAvrgElMotorPowerW
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_GetReg
</UL>

<P><STRONG><a name="[1c0]"></a>VSS_Clear</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, virtual_speed_sensor.o(i.VSS_Clear))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSS_Init
</UL>

<P><STRONG><a name="[14b]"></a>VSS_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, virtual_speed_sensor.o(i.VSS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VSS_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSS_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCboot
</UL>

<P><STRONG><a name="[9f]"></a>VSS_SetMecAcceleration</STRONG> (Thumb, 122 bytes, Stack size 20 bytes, virtual_speed_sensor.o(i.VSS_SetMecAcceleration))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = VSS_SetMecAcceleration
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAC_StartAlignment
</UL>

<P><STRONG><a name="[a0]"></a>VSS_SetMecAngle</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, virtual_speed_sensor.o(i.VSS_SetMecAngle))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAC_StartAlignment
</UL>

<P><STRONG><a name="[86]"></a>main</STRONG> (Thumb, 324 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = main &rArr; MX_ADC1_Init &rArr; HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_MotorControl_Init
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OPAMP_Init
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CORDIC_Init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_COMP_Init
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_NVIC_Init
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DAC3_Init
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC2_Init
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LocalSlaveProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[158]"></a>mc_lock_pins</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, mc_tasks.o(i.mc_lock_pins))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mc_lock_pins &rArr; LL_GPIO_LockPin
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_LockPin
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_MotorControl_Init
</UL>

<P><STRONG><a name="[147]"></a>startTimers</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, pwm_common.o(i.startTimers))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = startTimers
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCboot
</UL>

<P><STRONG><a name="[16e]"></a>waitForPolarizationEnd</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, pwm_common.o(i.waitForPolarizationEnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = waitForPolarizationEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R3_2_CurrentReadingPolarization
</UL>

<P><STRONG><a name="[80]"></a>_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[1f7]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[1f8]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[153]"></a>MX_ADC1_Init</STRONG> (Thumb, 248 bytes, Stack size 128 bytes, main.o(i.MX_ADC1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = MX_ADC1_Init &rArr; HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_MultiModeConfigChannel
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_InjectedConfigChannel
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[154]"></a>MX_ADC2_Init</STRONG> (Thumb, 160 bytes, Stack size 80 bytes, main.o(i.MX_ADC2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = MX_ADC2_Init &rArr; HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_InjectedConfigChannel
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[155]"></a>MX_DAC3_Init</STRONG> (Thumb, 94 bytes, Stack size 56 bytes, main.o(i.MX_DAC3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MX_DAC3_Init &rArr; HAL_DAC_ConfigChannel &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DAC_Init
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DAC_ConfigChannel
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[156]"></a>MX_GPIO_Init</STRONG> (Thumb, 174 bytes, Stack size 48 bytes, main.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[159]"></a>MX_NVIC_Init</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, main.o(i.MX_NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MX_NVIC_Init &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[15a]"></a>MX_TIM1_Init</STRONG> (Thumb, 364 bytes, Stack size 152 bytes, main.o(i.MX_TIM1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = MX_TIM1_Init &rArr; HAL_TIM_MspPostInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_SlaveConfigSynchro
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_ConfigBreakInput
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_ConfigBreakDeadTime
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[15e]"></a>MX_TIM4_Init</STRONG> (Thumb, 102 bytes, Stack size 56 bytes, main.o(i.MX_TIM4_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = MX_TIM4_Init &rArr; HAL_TIM_Encoder_Init &rArr; HAL_TIM_Encoder_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_Init
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[15f]"></a>MX_USART2_UART_Init</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, main.o(i.MX_USART2_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = MX_USART2_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetTxFifoThreshold
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetRxFifoThreshold
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_DisableFifoMode
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[161]"></a>MX_USART3_UART_Init</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, main.o(i.MX_USART3_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = MX_USART3_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetTxFifoThreshold
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetRxFifoThreshold
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_DisableFifoMode
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ad]"></a>FOC_CurrControllerM1</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, mc_tasks.o(i.FOC_CurrControllerM1))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = FOC_CurrControllerM1 &rArr; RCM_ExecNextConv &rArr; LL_ADC_REG_SetSequencerRanks
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_GetSpeedSensor
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPD_GetInstElSpeedDpp
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPD_GetElAngle
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_ReadOngoingConv
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_ExecNextConv
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMC_SetPhaseVoltage
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMC_GetPhaseCurrents
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PI_Controller
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCM_Rev_Park
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCM_Park
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCM_Clarke
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Circle_Limitation
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_HighFrequencyTask
</UL>

<P><STRONG><a name="[1c1]"></a>LL_GPIO_LockPin</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, mc_tasks.o(i.LL_GPIO_LockPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_GPIO_LockPin
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_lock_pins
</UL>

<P><STRONG><a name="[177]"></a>LL_ADC_REG_SetSequencerRanks</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, regular_conversion_manager.o(i.LL_ADC_REG_SetSequencerRanks))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_ADC_REG_SetSequencerRanks
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_ExecRegularConv
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_ExecNextConv
</UL>

<P><STRONG><a name="[179]"></a>RI_GetReg</STRONG> (Thumb, 1096 bytes, Stack size 32 bytes, register_interface.o(i.RI_GetReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RI_GetReg &rArr; RI_MovString
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PQD_GetAvrgElMotorPowerW
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetIqdref
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetAvrgMecSpeedUnit
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPD_GetElAngle
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetFaultState
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetVqd
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetValphabeta
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetSTMState
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetMecSpeedRefUnit
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetLastRampFinalSpeed
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetIqd
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetIalphabeta
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetIab
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetControlMode
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VBS_GetAvBusVoltage_V
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPD_GetS16Speed
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_GetKPDivisorPOW2
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_GetKP
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_GetKIDivisorPOW2
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_GetKI
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_GetKDDivisorPOW2
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_GetKD
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTC_GetAvTemp_C
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_MovString
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetLastRampFinalTorque
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetLastRampFinalDuration
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_GetRegCommandParser
</UL>

<P><STRONG><a name="[189]"></a>RI_MovString</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, register_interface.o(i.RI_MovString))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RI_MovString
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_SetReg
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_GetReg
</UL>

<P><STRONG><a name="[18d]"></a>RI_SetReg</STRONG> (Thumb, 802 bytes, Stack size 24 bytes, register_interface.o(i.RI_SetReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = RI_SetReg &rArr; MCPA_cfgLog &rArr; MCPA_stopDataLog
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetIqdref
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_ExecSpeedRamp
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_SetCurrentReferences
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetTeref
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetMecSpeedRefUnit
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_ExecTorqueRamp
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_SetKPDivisorPOW2
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_SetKP
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_SetKIDivisorPOW2
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_SetKI
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_SetKDDivisorPOW2
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_SetKD
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCPA_cfgLog
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_MovString
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RI_SetRegCommandParser
</UL>

<P><STRONG><a name="[1bd]"></a>LL_DMA_EnableChannel</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usart_aspep_driver.o(i.LL_DMA_EnableChannel))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UASPEP_SEND_PACKET
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UASPEP_RECEIVE_BUFFER
</UL>

<P><STRONG><a name="[1bc]"></a>LL_DMA_SetDataLength</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usart_aspep_driver.o(i.LL_DMA_SetDataLength))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UASPEP_SEND_PACKET
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UASPEP_RECEIVE_BUFFER
</UL>

<P><STRONG><a name="[96]"></a>ASPEP_TXframeProcess</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, aspep.o(i.ASPEP_TXframeProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ASPEP_TXframeProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASPEP_sendPacket
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASPEP_sendPing
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASPEP_sendBeacon
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASPEP_sendNack
</UL>

<P><STRONG><a name="[95]"></a>ASPEP_sendNack</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, aspep.o(i.ASPEP_sendNack))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ASPEP_sendNack &rArr; ASPEP_TXframeProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASPEP_TXframeProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASPEP_RXframeProcess
</UL>

<P><STRONG><a name="[cd]"></a>LL_ADC_GetOffsetChannel</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32g4xx_hal_adc.o(i.LL_ADC_GetOffsetChannel))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
</UL>

<P><STRONG><a name="[cb]"></a>LL_ADC_INJ_IsConversionOngoing</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32g4xx_hal_adc.o(i.LL_ADC_INJ_IsConversionOngoing))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
</UL>

<P><STRONG><a name="[ca]"></a>LL_ADC_REG_IsConversionOngoing</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32g4xx_hal_adc.o(i.LL_ADC_REG_IsConversionOngoing))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
</UL>

<P><STRONG><a name="[cc]"></a>LL_ADC_SetChannelSamplingTime</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32g4xx_hal_adc.o(i.LL_ADC_SetChannelSamplingTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_ADC_SetChannelSamplingTime
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
</UL>

<P><STRONG><a name="[ce]"></a>LL_ADC_SetOffsetState</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32g4xx_hal_adc.o(i.LL_ADC_SetOffsetState))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
</UL>

<P><STRONG><a name="[c6]"></a>LL_ADC_GetOffsetChannel</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32g4xx_hal_adc_ex.o(i.LL_ADC_GetOffsetChannel))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_InjectedConfigChannel
</UL>

<P><STRONG><a name="[c3]"></a>LL_ADC_INJ_IsConversionOngoing</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32g4xx_hal_adc_ex.o(i.LL_ADC_INJ_IsConversionOngoing))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_InjectedConfigChannel
</UL>

<P><STRONG><a name="[c4]"></a>LL_ADC_REG_IsConversionOngoing</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32g4xx_hal_adc_ex.o(i.LL_ADC_REG_IsConversionOngoing))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_MultiModeConfigChannel
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_InjectedConfigChannel
</UL>

<P><STRONG><a name="[c5]"></a>LL_ADC_SetChannelSamplingTime</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32g4xx_hal_adc_ex.o(i.LL_ADC_SetChannelSamplingTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_ADC_SetChannelSamplingTime
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_InjectedConfigChannel
</UL>

<P><STRONG><a name="[c7]"></a>LL_ADC_SetOffsetState</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32g4xx_hal_adc_ex.o(i.LL_ADC_SetOffsetState))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_InjectedConfigChannel
</UL>

<P><STRONG><a name="[df]"></a>DMA_CalcDMAMUXChannelBaseAndMask</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32g4xx_hal_dma.o(i.DMA_CalcDMAMUXChannelBaseAndMask))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[e0]"></a>DMA_CalcDMAMUXRequestGenBaseAndMask</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32g4xx_hal_dma.o(i.DMA_CalcDMAMUXRequestGenBaseAndMask))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[e8]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32g4xx_hal_cortex.o(i.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[f7]"></a>TIM_OC1_SetConfig</STRONG> (Thumb, 132 bytes, Stack size 28 bytes, stm32g4xx_hal_tim.o(i.TIM_OC1_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = TIM_OC1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[f9]"></a>TIM_OC3_SetConfig</STRONG> (Thumb, 118 bytes, Stack size 20 bytes, stm32g4xx_hal_tim.o(i.TIM_OC3_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_OC3_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[fa]"></a>TIM_OC4_SetConfig</STRONG> (Thumb, 120 bytes, Stack size 20 bytes, stm32g4xx_hal_tim.o(i.TIM_OC4_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_OC4_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[fb]"></a>TIM_OC5_SetConfig</STRONG> (Thumb, 86 bytes, Stack size 12 bytes, stm32g4xx_hal_tim.o(i.TIM_OC5_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC5_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[fc]"></a>TIM_OC6_SetConfig</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, stm32g4xx_hal_tim.o(i.TIM_OC6_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC6_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[100]"></a>TIM_SlaveTimer_SetConfig</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, stm32g4xx_hal_tim.o(i.TIM_SlaveTimer_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM_SlaveTimer_SetConfig &rArr; TIM_TI2_ConfigInputStage
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI2_ConfigInputStage
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI1_ConfigInputStage
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETR_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_SlaveConfigSynchro
</UL>

<P><STRONG><a name="[1a3]"></a>TIM_TI1_ConfigInputStage</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32g4xx_hal_tim.o(i.TIM_TI1_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_TI1_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SlaveTimer_SetConfig
</UL>

<P><STRONG><a name="[1a4]"></a>TIM_TI2_ConfigInputStage</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32g4xx_hal_tim.o(i.TIM_TI2_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_TI2_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SlaveTimer_SetConfig
</UL>

<P><STRONG><a name="[70]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32g4xx_hal_uart.o(i.UART_DMAAbortOnError))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_DMAAbortOnError
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32g4xx_hal_uart.o(i.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[105]"></a>UART_EndRxTransfer</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, stm32g4xx_hal_uart.o(i.UART_EndRxTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_EndRxTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[77]"></a>UART_RxISR_16BIT</STRONG> (Thumb, 162 bytes, Stack size 8 bytes, stm32g4xx_hal_uart.o(i.UART_RxISR_16BIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART_RxISR_16BIT &rArr; HAL_UART_RxCpltCallback &rArr; HAL_UART_Receive_IT &rArr; UART_Start_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32g4xx_hal_uart.o(i.UART_RxISR_16BIT_FIFOEN)
<LI> stm32g4xx_hal_uart.o(i.UART_Start_Receive_IT)
</UL>
<P><STRONG><a name="[7a]"></a>UART_RxISR_16BIT_FIFOEN</STRONG> (Thumb, 364 bytes, Stack size 32 bytes, stm32g4xx_hal_uart.o(i.UART_RxISR_16BIT_FIFOEN))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UART_RxISR_16BIT_FIFOEN &rArr; HAL_UART_RxCpltCallback &rArr; HAL_UART_Receive_IT &rArr; UART_Start_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32g4xx_hal_uart.o(i.UART_Start_Receive_IT)
</UL>
<P><STRONG><a name="[78]"></a>UART_RxISR_8BIT</STRONG> (Thumb, 162 bytes, Stack size 8 bytes, stm32g4xx_hal_uart.o(i.UART_RxISR_8BIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART_RxISR_8BIT &rArr; HAL_UART_RxCpltCallback &rArr; HAL_UART_Receive_IT &rArr; UART_Start_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32g4xx_hal_uart.o(i.UART_RxISR_8BIT_FIFOEN)
<LI> stm32g4xx_hal_uart.o(i.UART_Start_Receive_IT)
</UL>
<P><STRONG><a name="[79]"></a>UART_RxISR_8BIT_FIFOEN</STRONG> (Thumb, 364 bytes, Stack size 32 bytes, stm32g4xx_hal_uart.o(i.UART_RxISR_8BIT_FIFOEN))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UART_RxISR_8BIT_FIFOEN &rArr; HAL_UART_RxCpltCallback &rArr; HAL_UART_Receive_IT &rArr; UART_Start_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32g4xx_hal_uart.o(i.UART_Start_Receive_IT)
</UL>
<P><STRONG><a name="[102]"></a>UARTEx_SetNbDataToProcess</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, stm32g4xx_hal_uart_ex.o(i.UARTEx_SetNbDataToProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = UARTEx_SetNbDataToProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetTxFifoThreshold
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetRxFifoThreshold
</UL>

<P><STRONG><a name="[a6]"></a>LL_TIM_IC_SetFilter</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, encoder_speed_pos_fdbk.o(i.LL_TIM_IC_SetFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_TIM_IC_SetFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC_Init
</UL>

<P><STRONG><a name="[16d]"></a>LL_ADC_INJ_StartConversion</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, r3_2_g4xx_pwm_curr_fdbk.o(i.LL_ADC_INJ_StartConversion))
<BR><BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R3_2_CurrentReadingPolarization
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R3_2_RLSwitchOnPWM
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R3_2_ADCxInit
</UL>

<P><STRONG><a name="[16f]"></a>LL_TIM_OC_DisablePreload</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, r3_2_g4xx_pwm_curr_fdbk.o(i.LL_TIM_OC_DisablePreload))
<BR><BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R3_2_CurrentReadingPolarization
</UL>

<P><STRONG><a name="[170]"></a>LL_TIM_OC_EnablePreload</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, r3_2_g4xx_pwm_curr_fdbk.o(i.LL_TIM_OC_EnablePreload))
<BR><BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R3_2_CurrentReadingPolarization
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R3_2_TIMxInit
</UL>

<P><STRONG><a name="[174]"></a>LL_TIM_OC_SetMode</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, r3_2_g4xx_pwm_curr_fdbk.o(i.LL_TIM_OC_SetMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_TIM_OC_SetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R3_2_RLDetectionModeSetDuty
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R3_2_RLDetectionModeEnable
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R3_2_RLDetectionModeDisable
</UL>

<P><STRONG><a name="[171]"></a>LL_TIM_SetTriggerOutput</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, r3_2_g4xx_pwm_curr_fdbk.o(i.LL_TIM_SetTriggerOutput))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R3_2_RLDetectionModeSetDuty
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R3_2_GetPhaseCurrents
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R3_2_TIMx_UP_IRQHandler
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R3_2_TIMxInit
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R3_2_RLGetPhaseCurrents
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R3_2_HFCurrentsPolarizationC
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R3_2_HFCurrentsPolarizationAB
</UL>

<P><STRONG><a name="[16c]"></a>R3_2_ADCxInit</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, r3_2_g4xx_pwm_curr_fdbk.o(i.R3_2_ADCxInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = R3_2_ADCxInit
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_INJ_StartConversion
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R3_2_Init
</UL>

<P><STRONG><a name="[71]"></a>R3_2_HFCurrentsPolarizationAB</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, r3_2_g4xx_pwm_curr_fdbk.o(i.R3_2_HFCurrentsPolarizationAB))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = R3_2_HFCurrentsPolarizationAB
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_SetTriggerOutput
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r3_2_g4xx_pwm_curr_fdbk.o(i.R3_2_CurrentReadingPolarization)
</UL>
<P><STRONG><a name="[73]"></a>R3_2_HFCurrentsPolarizationC</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, r3_2_g4xx_pwm_curr_fdbk.o(i.R3_2_HFCurrentsPolarizationC))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = R3_2_HFCurrentsPolarizationC
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_SetTriggerOutput
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r3_2_g4xx_pwm_curr_fdbk.o(i.R3_2_CurrentReadingPolarization)
</UL>
<P><STRONG><a name="[74]"></a>R3_2_RLGetPhaseCurrents</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, r3_2_g4xx_pwm_curr_fdbk.o(i.R3_2_RLGetPhaseCurrents))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = R3_2_RLGetPhaseCurrents
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_SetTriggerOutput
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r3_2_g4xx_pwm_curr_fdbk.o(i.R3_2_RLDetectionModeEnable)
</UL>
<P><STRONG><a name="[76]"></a>R3_2_RLSwitchOnPWM</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, r3_2_g4xx_pwm_curr_fdbk.o(i.R3_2_RLSwitchOnPWM))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = R3_2_RLSwitchOnPWM
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_INJ_StartConversion
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r3_2_g4xx_pwm_curr_fdbk.o(i.R3_2_RLDetectionModeEnable)
</UL>
<P><STRONG><a name="[75]"></a>R3_2_RLTurnOnLowSides</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, r3_2_g4xx_pwm_curr_fdbk.o(i.R3_2_RLTurnOnLowSides))
<BR>[Address Reference Count : 1]<UL><LI> r3_2_g4xx_pwm_curr_fdbk.o(i.R3_2_RLDetectionModeEnable)
</UL>
<P><STRONG><a name="[172]"></a>R3_2_SetAOReferenceVoltage</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, r3_2_g4xx_pwm_curr_fdbk.o(i.R3_2_SetAOReferenceVoltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = R3_2_SetAOReferenceVoltage
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R3_2_Init
</UL>

<P><STRONG><a name="[173]"></a>R3_2_TIMxInit</STRONG> (Thumb, 236 bytes, Stack size 16 bytes, r3_2_g4xx_pwm_curr_fdbk.o(i.R3_2_TIMxInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = R3_2_TIMxInit
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_SetTriggerOutput
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_EnablePreload
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R3_2_Init
</UL>

<P><STRONG><a name="[175]"></a>R3_2_WriteTIMRegisters</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, r3_2_g4xx_pwm_curr_fdbk.o(i.R3_2_WriteTIMRegisters))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R3_2_SetADCSampPointSectX
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R3_2_SetADCSampPointPolarization
</UL>

<P><STRONG><a name="[138]"></a>MCPA_stopDataLog</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, mcpa.o(i.MCPA_stopDataLog))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MCPA_stopDataLog
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCPA_cfgLog
</UL>

<P><STRONG><a name="[98]"></a>GenerateCRC16CheckCode</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, mbrtu.o(i.GenerateCRC16CheckCode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GenerateCRC16CheckCode
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyntheticSlaveAccessRespond
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckRTUMessageIntegrity
</UL>

<P><STRONG><a name="[16]"></a>HandleReadCoilStatusCommand</STRONG> (Thumb, 30 bytes, Stack size 264 bytes, mbrtuslave.o(i.HandleReadCoilStatusCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 836<LI>Call Chain = HandleReadCoilStatusCommand &rArr; SyntheticSlaveAccessRespond &rArr; GenerateMasterAccessRespond &rArr; ConvertBoolArrayToMBByteArray
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyntheticSlaveAccessRespond
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCoilStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbrtuslave.o(.data)
</UL>
<P><STRONG><a name="[18]"></a>HandleReadHoldingRegisterCommand</STRONG> (Thumb, 30 bytes, Stack size 264 bytes, mbrtuslave.o(i.HandleReadHoldingRegisterCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 836<LI>Call Chain = HandleReadHoldingRegisterCommand &rArr; SyntheticSlaveAccessRespond &rArr; GenerateMasterAccessRespond &rArr; ConvertBoolArrayToMBByteArray
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHoldingRegister
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyntheticSlaveAccessRespond
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbrtuslave.o(.data)
</UL>
<P><STRONG><a name="[19]"></a>HandleReadInputRegisterCommand</STRONG> (Thumb, 30 bytes, Stack size 264 bytes, mbrtuslave.o(i.HandleReadInputRegisterCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 836<LI>Call Chain = HandleReadInputRegisterCommand &rArr; SyntheticSlaveAccessRespond &rArr; GenerateMasterAccessRespond &rArr; ConvertBoolArrayToMBByteArray
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyntheticSlaveAccessRespond
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInputRegister
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbrtuslave.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>HandleReadInputStatusCommand</STRONG> (Thumb, 30 bytes, Stack size 264 bytes, mbrtuslave.o(i.HandleReadInputStatusCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 836<LI>Call Chain = HandleReadInputStatusCommand &rArr; SyntheticSlaveAccessRespond &rArr; GenerateMasterAccessRespond &rArr; ConvertBoolArrayToMBByteArray
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyntheticSlaveAccessRespond
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInputStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbrtuslave.o(.data)
</UL>
<P><STRONG><a name="[1c]"></a>HandleWriteMultipleCoilCommand</STRONG> (Thumb, 38 bytes, Stack size 272 bytes, mbrtuslave.o(i.HandleWriteMultipleCoilCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 844<LI>Call Chain = HandleWriteMultipleCoilCommand &rArr; SyntheticSlaveAccessRespond &rArr; GenerateMasterAccessRespond &rArr; ConvertBoolArrayToMBByteArray
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyntheticSlaveAccessRespond
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMultipleCoil
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbrtuslave.o(.data)
</UL>
<P><STRONG><a name="[1d]"></a>HandleWriteMultipleRegisterCommand</STRONG> (Thumb, 38 bytes, Stack size 272 bytes, mbrtuslave.o(i.HandleWriteMultipleRegisterCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 844<LI>Call Chain = HandleWriteMultipleRegisterCommand &rArr; SyntheticSlaveAccessRespond &rArr; GenerateMasterAccessRespond &rArr; ConvertBoolArrayToMBByteArray
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyntheticSlaveAccessRespond
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMultipleRegister
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbrtuslave.o(.data)
</UL>
<P><STRONG><a name="[1a]"></a>HandleWriteSingleCoilCommand</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, mbrtuslave.o(i.HandleWriteSingleCoilCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 596<LI>Call Chain = HandleWriteSingleCoilCommand &rArr; SyntheticSlaveAccessRespond &rArr; GenerateMasterAccessRespond &rArr; ConvertBoolArrayToMBByteArray
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyntheticSlaveAccessRespond
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSingleCoil
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCoilStatus
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CovertSingleCommandCoilToBoolStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbrtuslave.o(.data)
</UL>
<P><STRONG><a name="[1b]"></a>HandleWriteSingleRegisterCommand</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, mbrtuslave.o(i.HandleWriteSingleRegisterCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 588<LI>Call Chain = HandleWriteSingleRegisterCommand &rArr; SyntheticSlaveAccessRespond &rArr; GenerateMasterAccessRespond &rArr; ConvertBoolArrayToMBByteArray
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSingleRegister
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyntheticSlaveAccessRespond
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbrtuslave.o(.data)
</UL>
<P><STRONG><a name="[bc]"></a>ConvertBoolArrayToMBByteArray</STRONG> (Thumb, 64 bytes, Stack size 20 bytes, mbpdu.o(i.ConvertBoolArrayToMBByteArray))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ConvertBoolArrayToMBByteArray
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenerateMasterAccessRespond
</UL>

<P><STRONG><a name="[bd]"></a>ConvertRegisterArrayToMBByteArray</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, mbpdu.o(i.ConvertRegisterArrayToMBByteArray))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ConvertRegisterArrayToMBByteArray
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenerateMasterAccessRespond
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
